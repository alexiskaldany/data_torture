Prop <- c(small,medium,large,extraLarge)
# Prepare a color palette. Here with R color brewer:
library(RColorBrewer)
myPalette <- brewer.pal(8, "Spectral")
# You can change the border of each area with the classical parameters:
pie(Prop , labels = c(paste("Small: ",percentSmall,"%"), paste("Medium: ",percentMedium,"%"), paste("Large: ",percentLarge,"%"), paste("Extra Large: ",percentExtraLarge,"%")), main = "Pie plot of MaturitySize", border="white", col=myPalette )
short = nrow(dat[dat$FurLength=="1",])
medium = nrow(dat[dat$FurLength=="2",])
long = nrow(dat[dat$FurLength=="3",])
totalamount = short+medium+long
percentShort = format(short/totalamount * 100, digits = 4)
percentMedium = format(medium/totalamount * 100, digits = 4)
percentLong = format(long/totalamount * 100, digits = 4)
#pie plot
Prop <- c(short,medium,long)
# Prepare a color palette. Here with R color brewer:
library(RColorBrewer)
myPalette <- brewer.pal(3, "Set2")
# You can change the border of each area with the classical parameters:
pie(Prop , labels = c(paste("Short: ",percentShort,"%"), paste("Medium: ",percentMedium,"%"), paste("Long: ", percentLong,"%")), main = "Pie plot of FurLength", border="white", col=myPalette )
vaccinatedYes = nrow(dat[dat$Vaccinated=="1",])
vaccinatedNo = nrow(dat[dat$Vaccinated=="2",])
vaccinatedNotSure = nrow(dat[dat$Vaccinated=="3",])
totalamount = vaccinatedYes+vaccinatedNo+vaccinatedNotSure
percentVaccinatedYes = format(vaccinatedYes/totalamount * 100, digits = 4)
percentVaccinatedNo = format(vaccinatedNo/totalamount * 100, digits = 4)
percentVaccinatedNotSure = format(vaccinatedNotSure/totalamount * 100, digits = 4)
#pie plot
Prop <- c(vaccinatedYes,vaccinatedNo,vaccinatedNotSure)
# Prepare a color palette. Here with R color brewer:
library(RColorBrewer)
myPalette <- brewer.pal(11,"Paired")
# You can change the border of each area with the classical parameters:
pie(Prop , labels = c(paste("Vaccinated: ",percentVaccinatedYes, "%"), paste("Unvaccinated: ",percentVaccinatedNo, "%"), paste("Not Specified: ",percentVaccinatedNotSure, "%")), main = "Pie plot of Vaccinated", border="white", col=myPalette )
numericaldat = dat
numericaldat$ASnum = NaN
numericaldat$ASnum[numericaldat$AdoptionSpeed == 0] = 0
numericaldat$ASnum[numericaldat$AdoptionSpeed == 1] = floor(runif(sum(numericaldat$AdoptionSpeed == 1), 1, 8))
numericaldat$ASnum[numericaldat$AdoptionSpeed == 2] = floor(runif(sum(numericaldat$AdoptionSpeed == 2), 8, 31))
numericaldat$ASnum[numericaldat$AdoptionSpeed == 3] = floor(runif(sum(numericaldat$AdoptionSpeed == 3), 31, 91))
dogs = subset(numericaldat, numericaldat$Type == 1) # only the dogs
cats = subset(numericaldat, numericaldat$Type == 2) # only the cats
# 2 sample t-test
dc_t = t.test(dogs$ASnum, cats$ASnum)
dc_t
male = subset(numericaldat, numericaldat$Gender == 1) # only the male dogs
female = subset(numericaldat, numericaldat$Gender == 2) # only the female dogs
# 2 sample t-test
mf_t = t.test(male$ASnum, female$ASnum)
mf_t
# anova on size
anova_size = anova(aov(data = numericaldat, ASnum ~ MaturitySize))
anova_size
# anova for fur length
anova_fur = anova(aov(data = numericaldat, ASnum ~ FurLength))
anova_fur
# vaccination anova
anova_vac = anova(aov(data = numericaldat, ASnum ~ Vaccinated))
anova_vac
##data preparation
new_dat = dat[c('Type',  'Gender', 'MaturitySize', 'Vaccinated', 'AdoptionSpeed')]
xkabledply(summary(new_dat))
library(ggplot2)
ggplot(data=new_dat, aes(AdoptionSpeed)) +
geom_bar(breaks=seq(0, 4, by=1),
col="red",
aes(fill=..count..)) +
labs(title="AdoptionSpeed of pets", x = "AdoptionSpeed") +
scale_fill_gradient("Count", low="lightblue", high="#FF9999")
###group adoption speed 0 and 1
levels(new_dat$AdoptionSpeed)[levels(new_dat$AdoptionSpeed)==1] <-0
summary(new_dat)
###group adoption speed 3 and 4
levels(new_dat$AdoptionSpeed)[levels(new_dat$AdoptionSpeed)==4] <-3
summary(new_dat)
###group adoption speed 2 and 3
levels(new_dat$AdoptionSpeed)[levels(new_dat$AdoptionSpeed)==3] <-2
xkabledply(summary(new_dat))
levels(new_dat$AdoptionSpeed) <- c("0", "1")
summary(new_dat)
ggplot(data=new_dat, aes(AdoptionSpeed)) +
geom_bar(breaks=seq(0, 4, by=1),
col="red",
aes(fill=..count..)) +
labs(title="AdoptionSpeed of pets", x = "AdoptionSpeed") +
scale_fill_gradient("Count", low="lightblue", high="#FF9999")
logit <- glm(AdoptionSpeed ~ Type + MaturitySize + Vaccinated + Gender, data = new_dat, family = "binomial")
summary(logit)
loadPkg("regclass")
xkabledply(confusion_matrix(logit), title = "Confusion matrix from Logit Model" )
loadPkg("ResourceSelection")
LogitHoslem = hoslem.test(new_dat$AdoptionSpeed,fitted(logit)) # Hosmer and Lemeshow test, a chi-squared test
unloadPkg("ResourceSelection")
LogitHoslem
loadPkg("pROC")
prob=predict(logit, type = "response" )
new_dat$prob=prob
h <- roc(AdoptionSpeed~prob, data=new_dat)
#auc(h)
plot(h, main = "ROC curve of model")
preds <- with(new_dat,data.frame(Type=as.factor(1),MaturitySize=as.factor(3),Gender=as.factor(2),Vaccinated=as.factor(1)))
d3 <- cbind(preds, predict(logit, newdata = preds, type = "link",se = TRUE))
d3 <- within(d3, {
PredictedProb <- plogis(fit)
LL <- plogis(fit - (1.96 * se.fit))
UL <- plogis(fit + (1.96 * se.fit))
})
d3
dataTGMFV = dat[, c('Age','Type','Gender','MaturitySize','FurLength','Vaccinated','PhotoAmt','VideoAmt','AdoptionSpeed')]
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 0|dat$AdoptionSpeed == 1] = 0
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 2|dat$AdoptionSpeed == 3|dat$AdoptionSpeed == 4 ] = 1
# dataTGMFV$AdoptionSpeed = droplevels(dataTGMFV$AdoptionSpeed)
dataTGMFV$AdoptionSpeed = factor(dataTGMFV$AdoptionSpeed)
str(dataTGMFV)
#This is essentially best fit
reg.best10 <- regsubsets(AdoptionSpeed~. , data = dataTGMFV, nvmax = 10, nbest = 1, method = "exhaustive")
plot(reg.best10, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10, scale = "r2", main = "R^2")
# In the "leaps" package, we can use scale=c("bic","Cp","adjr2","r2")
plot(reg.best10, scale = "bic", main = "BIC")
plot(reg.best10, scale = "Cp", main = "Cp")
#summary(reg.best10)
petFeaturetableAll = glm(AdoptionSpeed ~Age+Type+Gender+MaturitySize+FurLength+Vaccinated+PhotoAmt, data = dataTGMFV, family = "binomial")
xkabledply(petFeaturetableAll, title = "Logistic Regression : Type ~ age+gender+size+fur+vaccinated+AdoptSpd+photos")
loadPkg("regclass")
loadPkg("ModelMetrics")
xkabledply( confusion_matrix(petFeaturetableAll), title = "Confusion matrix from Logit Model" )
pred_ = predict(petFeaturetableAll, dataTGMFV[1:8], type="response")
unloadPkg("regclass")
confusionMatrix( pred_, as.factor(dataTGMFV$AdoptionSpeed))
unloadPkg("ModelMetrics")
loadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
petLogitHoslem = hoslem.test(dataTGMFV$AdoptionSpeed, fitted(petFeaturetableAll)) # Hosmer and Lemeshow test, a chi-squared test
unloadPkg("ResourceSelection")
petLogitHoslem
unloadPkg("pROC")
loadPkg("pROC") # receiver operating characteristic curve, gives the diagnostic ability of a binary classifier system as its discrimination threshold is varied. The curve is on sensitivity/recall/true-positive-rate vs false_alarm/false-positive-rate/fall-out.
probOfTGMFV=predict(petFeaturetableAll, type = "response" )
dataTGMFV$prob=probOfTGMFV
aucRocOfTGMFV <- roc(AdoptionSpeed~prob, data=dataTGMFV)
auc(aucRocOfTGMFV) # area-under-curve prefer 0.8 or higher.
plot(aucRocOfTGMFV)
unloadPkg("pROC")
loadPkg("pscl") # use pR2( ) function to calculate McFadden statistics for model eval
petLogitpr2 = pR2(petFeaturetableAll)
petLogitpr2
unloadPkg("pscl")
featureClean = dat[ , c('Age','Type','Gender','MaturitySize','FurLength','Vaccinated','PhotoAmt','VideoAmt')]
featureClean$y = dataTGMFV$AdoptionSpeed # copy Holiday column and call it 'y'
#convert some columns into factos as appropriate
featureClean$y <- ifelse(featureClean$y == 1,TRUE,FALSE)
featureClean$y = factor(featureClean$y)
str(featureClean)
loadPkg("leaps")
reg.leaps <- regsubsets(y~., data = featureClean, nbest = 1, method = "exhaustive")  # leaps,
plot(reg.leaps, scale = "adjr2", main = "Adjusted R^2")
plot(reg.leaps, scale = "bic", main = "BIC")
plot(reg.leaps, scale = "Cp", main = "Cp")
loadPkg("bestglm")
res.bestglm <- bestglm(Xy = featureClean, family = binomial,
IC = "AIC",                 # Information criteria for
method = "exhaustive")
summary(res.bestglm)
res.bestglm$BestModels
summary(res.bestglm$BestModels)
unloadPkg("bestglm")
unloadPkg("leaps")
featureClean = dat[ , c('Age','Type','Gender','MaturitySize','FurLength','Vaccinated','PhotoAmt','VideoAmt')]
featureClean$y = dataTGMFV$AdoptionSpeed # copy Holiday column and call it 'y'
#convert some columns into factos as appropriate
featureClean$y <- ifelse(featureClean$y == 1,TRUE,FALSE)
featureClean$y = factor(featureClean$y)
str(featureClean)
# loadPkg("leaps")
# reg.leaps <- regsubsets(y~., data = featureClean, nbest = 1, method = "exhaustive")  # leaps,
# plot(reg.leaps, scale = "adjr2", main = "Adjusted R^2")
# plot(reg.leaps, scale = "bic", main = "BIC")
# plot(reg.leaps, scale = "Cp", main = "Cp")
loadPkg("bestglm")
res.bestglm <- bestglm(Xy = featureClean, family = binomial,
IC = "AIC",                 # Information criteria for
method = "exhaustive")
summary(res.bestglm)
res.bestglm$BestModels
summary(res.bestglm$BestModels)
unloadPkg("bestglm")
unloadPkg("leaps")
xkablesummary(res.bestglm$BestModels)
unloadPkg("bestglm")
unloadPkg("leaps")
xkabledeply(res.bestglm$BestModels)
xkabledply(res.bestglm$BestModels)
unloadPkg("bestglm")
unloadPkg("leaps")
xkabledply(res.bestglm$BestModels, title="result of bestglm using AIC")
unloadPkg("bestglm")
unloadPkg("leaps")
xkabledply(petLogitpr2)
xkablesummary(petLogitpr2)
loadPkg("pscl") # use pR2( ) function to calculate McFadden statistics for model eval
petLogitpr2 = pR2(petFeaturetableAll)
unloadPkg("pscl")
petLogitpr2
loadPkg("pscl") # use pR2( ) function to calculate McFadden statistics for model eval
petLogitpr2 = pR2(petFeaturetableAll)
petLogitpr2
unloadPkg("pscl")
ResultDf
loadPkg("gmodels")
loadPkg("FNN")
loadPkg("caret") # confusionMatrix
loadPkg("class")
# Loop thru different k values
# create an empty dataframe to store the results from confusion matrices
ResultDf = data.frame( k=numeric(0), Total.Accuracy= numeric(0), row.names = NULL )
for (kval in 3:21) {
pet_pred <- knn(train = pet_training, test = pet_test, cl=pet.trainLabels, k=kval)
petPREDCross <- CrossTable(pet.testLabels, pet_pred, prop.chisq = FALSE)
cm = caret::confusionMatrix(pet_pred, reference = pet.testLabels ) # from caret library
cmaccu = cm$overall['Accuracy']
cmt = data.frame(k=kval, Total.Accuracy = cmaccu, row.names = NULL ) # initialize a row of the metrics
ResultDf = rbind(ResultDf, cmt)
}
library(ezids)
knitr::opts_chunk$set(warning = F, results = "markup", message = F, echo = F)
#knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
## Loading data
data = read.csv('datafile.csv',encoding = "UTF-8")
initialrows = nrow(data)
data$AdoptionSpeed <- factor(data$AdoptionSpeed, order=T, levels = c(0,1,2,3,4))
# converting the data types we want - categorical
data$Type = as.factor(data$Type)
data$MaturitySize = as.factor(data$MaturitySize)
data$FurLength = as.factor(data$FurLength)
data$Vaccinated = as.factor(data$Vaccinated)
data$Gender = as.factor(data$Gender)
# Only looking at profiles with 1 animal
data = subset(data, data$Quantity == 1)
data = subset(data, ! data$AdoptionSpeed == 4)
# Only pulling the columns we want to look at
dat = data[c('Type', 'Age', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt','VideoAmt', 'AdoptionSpeed')]
#summary(dat)
## creating train test
set.seed(1000)
samp <- sample(2, nrow(dat), replace=TRUE, prob=c(0.7, 0.3))
train <- dat[samp==1, 1:9]
test <- dat[samp==2, 1:9]
#typeknn.trainFeatures = dat[samp == 1, c(2:9)]
#typeknn.testFeatures = dat[samp == 2, c(2:9)]
#typeknn.trainLabel = dat[samp==1, 1]
#typeknn.testLabel = dat[samp==2, 1]
loadPkg("ggplot2")
#Histogram
ggplot(data=dat, aes(AdoptionSpeed)) +
geom_bar(breaks=seq(0, 4, by=1),
col="red",
aes(fill=..count..)) +
labs(title="AdoptionSpeed of pets", x = "AdoptionSpeed") +
scale_fill_gradient("Count", low="green", high="red")
tmpDatAge = dat
tmpDatAge$Age = as.numeric(dat$Age)
ggplot(data=tmpDatAge, aes(Age)) +
geom_histogram(breaks=seq(0, 100, by=5),
col="red",
aes(fill=..count..)) +
labs(title="Histogram of Age of pets", x="Age(in months)") +
scale_fill_gradient("Count", low="green", high="red")
#Boxplot
ggplot(data = tmpDatAge,aes(y = Age))+
geom_boxplot() +
geom_boxplot( colour="orange", fill="#7777cc", outlier.colour="red", outlier.shape=8, outlier.size=4) +
labs(title="Age boxplot using `ggplot`",x="", y = "Age")
#Q-Q plot
qqnorm(tmpDatAge$Age, main="Q-Q plot of Age of pets", ylab = "Age(in months)",col="blue")
qqline(tmpDatAge$Age)
tmpPhotoAmt = dat
tmpPhotoAmt$PhotoAmt = as.numeric(tmpPhotoAmt$PhotoAmt)
ggplot(data=tmpPhotoAmt, aes(PhotoAmt)) +
geom_histogram(breaks=seq(0, 30, by=2),
col="red",
aes(fill=..count..)) +
labs(title="Histogram of PhotoAmt of pets") +
scale_fill_gradient("Count", low="green", high="red")
#Boxplot
ggplot(data = tmpPhotoAmt,aes(y = PhotoAmt))+
geom_boxplot() +
geom_boxplot( colour="orange", fill="#7777cc", outlier.colour="red", outlier.shape=8, outlier.size=4) +
labs(title="PhotoAmt boxplot using `ggplot`",x="", y = "Number of Photoes")
#Q-Q plot
qqnorm(tmpPhotoAmt$PhotoAmt, main="Q-Q plot of PhotoAmt of pets", ylab = "PhotoAmt",col="blue")
qqline(tmpPhotoAmt$PhotoAmt)
dog = nrow(dat[dat$Type=="1",])
cat = nrow(dat[dat$Type=="2",])
totalamount = dog+cat
percentDog = format(dog/totalamount * 100, digits = 4)
percentCat = format(cat/totalamount * 100, digits = 4)
Prop <- c(dog,cat)
# Prepare a color palette. Here with R color brewer:
library(RColorBrewer)
myPalette <- brewer.pal(5, "RdYlGn")
# You can change the border of each area with the classical parameters:
pie(Prop , labels = c(paste("Dog: ",percentDog,"%"), paste("Cat: ",percentCat,"%")),
main = "Pie plot of Type of pets", border="white", col=myPalette )
#pie plot
male = nrow(dat[dat$Gender=="1",])
female = nrow(dat[dat$Gender=="2",])
percentMale = format(male/(male+female) * 100, digits = 4)
percentFemale = format(female/(male+female) * 100, digits = 4)
Prop <- c(male,female)
# Prepare a color palette. Here with R color brewer:
library(RColorBrewer)
myPalette <- brewer.pal(3, "Pastel1")
# You can change the border of each area with the classical parameters:
pie(Prop , labels = c(paste("Male: ", percentMale,"%"),paste("Female: ",percentFemale,"%")), main = "Pie plot of Gender", border="white", col=myPalette )
small = nrow(dat[dat$MaturitySize=="1",])
medium = nrow(dat[dat$MaturitySize=="2",])
large = nrow(dat[dat$MaturitySize=="3",])
extraLarge = nrow(dat[dat$MaturitySize=="4",])
totalamount = small+medium+large+extraLarge
percentSmall = format(small/totalamount * 100, digits = 4)
percentMedium = format(medium/totalamount * 100, digits = 4)
percentLarge = format(large/totalamount * 100, digits = 4)
percentExtraLarge = format(extraLarge/totalamount * 100, digits = 4)
#pie plot
Prop <- c(small,medium,large,extraLarge)
# Prepare a color palette. Here with R color brewer:
library(RColorBrewer)
myPalette <- brewer.pal(8, "Spectral")
# You can change the border of each area with the classical parameters:
pie(Prop , labels = c(paste("Small: ",percentSmall,"%"), paste("Medium: ",percentMedium,"%"), paste("Large: ",percentLarge,"%"), paste("Extra Large: ",percentExtraLarge,"%")), main = "Pie plot of MaturitySize", border="white", col=myPalette )
short = nrow(dat[dat$FurLength=="1",])
medium = nrow(dat[dat$FurLength=="2",])
long = nrow(dat[dat$FurLength=="3",])
totalamount = short+medium+long
percentShort = format(short/totalamount * 100, digits = 4)
percentMedium = format(medium/totalamount * 100, digits = 4)
percentLong = format(long/totalamount * 100, digits = 4)
#pie plot
Prop <- c(short,medium,long)
# Prepare a color palette. Here with R color brewer:
library(RColorBrewer)
myPalette <- brewer.pal(3, "Set2")
# You can change the border of each area with the classical parameters:
pie(Prop , labels = c(paste("Short: ",percentShort,"%"), paste("Medium: ",percentMedium,"%"), paste("Long: ", percentLong,"%")), main = "Pie plot of FurLength", border="white", col=myPalette )
vaccinatedYes = nrow(dat[dat$Vaccinated=="1",])
vaccinatedNo = nrow(dat[dat$Vaccinated=="2",])
vaccinatedNotSure = nrow(dat[dat$Vaccinated=="3",])
totalamount = vaccinatedYes+vaccinatedNo+vaccinatedNotSure
percentVaccinatedYes = format(vaccinatedYes/totalamount * 100, digits = 4)
percentVaccinatedNo = format(vaccinatedNo/totalamount * 100, digits = 4)
percentVaccinatedNotSure = format(vaccinatedNotSure/totalamount * 100, digits = 4)
#pie plot
Prop <- c(vaccinatedYes,vaccinatedNo,vaccinatedNotSure)
# Prepare a color palette. Here with R color brewer:
library(RColorBrewer)
myPalette <- brewer.pal(11,"Paired")
# You can change the border of each area with the classical parameters:
pie(Prop , labels = c(paste("Vaccinated: ",percentVaccinatedYes, "%"), paste("Unvaccinated: ",percentVaccinatedNo, "%"), paste("Not Specified: ",percentVaccinatedNotSure, "%")), main = "Pie plot of Vaccinated", border="white", col=myPalette )
numericaldat = dat
numericaldat$ASnum = NaN
numericaldat$ASnum[numericaldat$AdoptionSpeed == 0] = 0
numericaldat$ASnum[numericaldat$AdoptionSpeed == 1] = floor(runif(sum(numericaldat$AdoptionSpeed == 1), 1, 8))
numericaldat$ASnum[numericaldat$AdoptionSpeed == 2] = floor(runif(sum(numericaldat$AdoptionSpeed == 2), 8, 31))
numericaldat$ASnum[numericaldat$AdoptionSpeed == 3] = floor(runif(sum(numericaldat$AdoptionSpeed == 3), 31, 91))
dogs = subset(numericaldat, numericaldat$Type == 1) # only the dogs
cats = subset(numericaldat, numericaldat$Type == 2) # only the cats
# 2 sample t-test
dc_t = t.test(dogs$ASnum, cats$ASnum)
dc_t
male = subset(numericaldat, numericaldat$Gender == 1) # only the male dogs
female = subset(numericaldat, numericaldat$Gender == 2) # only the female dogs
# 2 sample t-test
mf_t = t.test(male$ASnum, female$ASnum)
mf_t
# anova on size
anova_size = anova(aov(data = numericaldat, ASnum ~ MaturitySize))
anova_size
# anova for fur length
anova_fur = anova(aov(data = numericaldat, ASnum ~ FurLength))
anova_fur
# vaccination anova
anova_vac = anova(aov(data = numericaldat, ASnum ~ Vaccinated))
anova_vac
##data preparation
new_dat = dat[c('Type',  'Gender', 'MaturitySize', 'Vaccinated', 'AdoptionSpeed')]
xkabledply(summary(new_dat))
library(ggplot2)
ggplot(data=new_dat, aes(AdoptionSpeed)) +
geom_bar(breaks=seq(0, 4, by=1),
col="red",
aes(fill=..count..)) +
labs(title="AdoptionSpeed of pets", x = "AdoptionSpeed") +
scale_fill_gradient("Count", low="lightblue", high="#FF9999")
###group adoption speed 0 and 1
levels(new_dat$AdoptionSpeed)[levels(new_dat$AdoptionSpeed)==1] <-0
summary(new_dat)
###group adoption speed 3 and 4
levels(new_dat$AdoptionSpeed)[levels(new_dat$AdoptionSpeed)==4] <-3
summary(new_dat)
###group adoption speed 2 and 3
levels(new_dat$AdoptionSpeed)[levels(new_dat$AdoptionSpeed)==3] <-2
xkabledply(summary(new_dat))
levels(new_dat$AdoptionSpeed) <- c("0", "1")
summary(new_dat)
ggplot(data=new_dat, aes(AdoptionSpeed)) +
geom_bar(breaks=seq(0, 4, by=1),
col="red",
aes(fill=..count..)) +
labs(title="AdoptionSpeed of pets", x = "AdoptionSpeed") +
scale_fill_gradient("Count", low="lightblue", high="#FF9999")
logit <- glm(AdoptionSpeed ~ Type + MaturitySize + Vaccinated + Gender, data = new_dat, family = "binomial")
summary(logit)
loadPkg("regclass")
xkabledply(confusion_matrix(logit), title = "Confusion matrix from Logit Model" )
loadPkg("ResourceSelection")
LogitHoslem = hoslem.test(new_dat$AdoptionSpeed,fitted(logit)) # Hosmer and Lemeshow test, a chi-squared test
unloadPkg("ResourceSelection")
LogitHoslem
loadPkg("pROC")
prob=predict(logit, type = "response" )
new_dat$prob=prob
h <- roc(AdoptionSpeed~prob, data=new_dat)
#auc(h)
plot(h, main = "ROC curve of model")
preds <- with(new_dat,data.frame(Type=as.factor(1),MaturitySize=as.factor(3),Gender=as.factor(2),Vaccinated=as.factor(1)))
d3 <- cbind(preds, predict(logit, newdata = preds, type = "link",se = TRUE))
d3 <- within(d3, {
PredictedProb <- plogis(fit)
LL <- plogis(fit - (1.96 * se.fit))
UL <- plogis(fit + (1.96 * se.fit))
})
d3
dataTGMFV = dat[, c('Age','Type','Gender','MaturitySize','FurLength','Vaccinated','PhotoAmt','VideoAmt','AdoptionSpeed')]
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 0|dat$AdoptionSpeed == 1] = 0
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 2|dat$AdoptionSpeed == 3|dat$AdoptionSpeed == 4 ] = 1
# dataTGMFV$AdoptionSpeed = droplevels(dataTGMFV$AdoptionSpeed)
dataTGMFV$AdoptionSpeed = factor(dataTGMFV$AdoptionSpeed)
str(dataTGMFV)
#This is essentially best fit
reg.best10 <- regsubsets(AdoptionSpeed~. , data = dataTGMFV, nvmax = 10, nbest = 1, method = "exhaustive")
plot(reg.best10, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10, scale = "r2", main = "R^2")
# In the "leaps" package, we can use scale=c("bic","Cp","adjr2","r2")
plot(reg.best10, scale = "bic", main = "BIC")
plot(reg.best10, scale = "Cp", main = "Cp")
#summary(reg.best10)
petFeaturetableAll = glm(AdoptionSpeed ~Age+Type+Gender+MaturitySize+FurLength+Vaccinated+PhotoAmt, data = dataTGMFV, family = "binomial")
xkabledply(petFeaturetableAll, title = "Logistic Regression : Type ~ age+gender+size+fur+vaccinated+AdoptSpd+photos")
loadPkg("regclass")
loadPkg("ModelMetrics")
xkabledply( confusion_matrix(petFeaturetableAll), title = "Confusion matrix from Logit Model" )
pred_ = predict(petFeaturetableAll, dataTGMFV[1:8], type="response")
unloadPkg("regclass")
confusionMatrix( pred_, as.factor(dataTGMFV$AdoptionSpeed))
unloadPkg("ModelMetrics")
loadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
petLogitHoslem = hoslem.test(dataTGMFV$AdoptionSpeed, fitted(petFeaturetableAll)) # Hosmer and Lemeshow test, a chi-squared test
unloadPkg("ResourceSelection")
petLogitHoslem
unloadPkg("pROC")
loadPkg("pROC") # receiver operating characteristic curve, gives the diagnostic ability of a binary classifier system as its discrimination threshold is varied. The curve is on sensitivity/recall/true-positive-rate vs false_alarm/false-positive-rate/fall-out.
probOfTGMFV=predict(petFeaturetableAll, type = "response" )
dataTGMFV$prob=probOfTGMFV
aucRocOfTGMFV <- roc(AdoptionSpeed~prob, data=dataTGMFV)
auc(aucRocOfTGMFV) # area-under-curve prefer 0.8 or higher.
plot(aucRocOfTGMFV)
unloadPkg("pROC")
loadPkg("pscl") # use pR2( ) function to calculate McFadden statistics for model eval
petLogitpr2 = pR2(petFeaturetableAll)
petLogitpr2
unloadPkg("pscl")
featureClean = dat[ , c('Age','Type','Gender','MaturitySize','FurLength','Vaccinated','PhotoAmt','VideoAmt')]
featureClean$y = dataTGMFV$AdoptionSpeed # copy Holiday column and call it 'y'
#convert some columns into factos as appropriate
featureClean$y <- ifelse(featureClean$y == 1,TRUE,FALSE)
featureClean$y = factor(featureClean$y)
str(featureClean)
# loadPkg("leaps")
# reg.leaps <- regsubsets(y~., data = featureClean, nbest = 1, method = "exhaustive")  # leaps,
# plot(reg.leaps, scale = "adjr2", main = "Adjusted R^2")
# plot(reg.leaps, scale = "bic", main = "BIC")
# plot(reg.leaps, scale = "Cp", main = "Cp")
loadPkg("bestglm")
res.bestglm <- bestglm(Xy = featureClean, family = binomial,
IC = "AIC",                 # Information criteria for
method = "exhaustive")
summary(res.bestglm)
res.bestglm$BestModels
summary(res.bestglm$BestModels)
xkabledply(res.bestglm$BestModels, title="result of bestglm using AIC")
unloadPkg("bestglm")
unloadPkg("leaps")
#first we want to scale the data so KNN will operate correctly
knnDataTGMFV = dataTGMFV[1:9]
knnDataTGMFV$Type = as.numeric(knnDataTGMFV$Type)
knnDataTGMFV$Gender = as.numeric(knnDataTGMFV$Gender)
knnDataTGMFV$MaturitySize = as.numeric(knnDataTGMFV$MaturitySize)
knnDataTGMFV$FurLength = as.numeric(knnDataTGMFV$FurLength)
knnDataTGMFV$Vaccinated = as.numeric(knnDataTGMFV$Vaccinated)
# knnDataTGMFV$AdoptionSpeed = dat$AdoptionSpeed
str(knnDataTGMFV)
scaledPet <- as.data.frame(scale(knnDataTGMFV[1:8], center = TRUE, scale = TRUE))
#We also need to create test and train data sets, we will do this slightly differently by using the sample function. The 2 says create 2 data sets essentially, replacement means we can reset the random sampling across each vector and the probability gives sample the weight of the splits, 2/3 for train, 1/3 for test.
set.seed(1000)
pet_sample <- sample(2, nrow(scaledPet), replace=TRUE, prob=c(0.67, 0.33))
#We then just need to use the new variable to create the test/train outputs, selecting the first five rows as they are the numeric data in the pet data set and we want to predict AdoptionSpeed
pet_training <- scaledPet[pet_sample==1, 1:8]
pet_test <- scaledPet[pet_sample==2, 1:8]
#Now we need to create our 'Y' variables or labels need to input into the KNN function
pet.trainLabels <- knnDataTGMFV[pet_sample==1, 9]
pet.testLabels <- knnDataTGMFV[pet_sample==2, 9]
