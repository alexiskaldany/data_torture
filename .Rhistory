loadPkg("pROC") # receiver operating characteristic curve, gives the diagnostic ability of a binary classifier system as its discrimination threshold is varied. The curve is on sensitivity/recall/true-positive-rate vs false_alarm/false-positive-rate/fall-out.
prob=predict(petFeaturetableAll, type = "response" )
dataTGMFV$prob=prob
h <- roc(AdoptionSpeed~prob, data=dataTGMFV)
auc(h) # area-under-curve prefer 0.8 or higher.
dataTGMFV = dat[, c('Type','Gender','MaturitySize','FurLength','Vaccinated','AdoptionSpeed')]
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F, echo = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
library("corrplot")
library("ezids")
library("gtsummary")
library('ggridges')
library('viridis')
library('wesanderson')
library('gridExtra')
library('leaps')
library('vtable')
library('pscl')
## Loading data
data = read.csv('datafile.csv',encoding = "UTF-8")
initialrows = nrow(data)
data$AdoptionSpeed <- factor(data$AdoptionSpeed, order=T, levels = c(0,1,2,3,4))
# converting the data types we want - categorical
data$Type = as.factor(data$Type)
data$MaturitySize = as.factor(data$MaturitySize)
data$FurLength = as.factor(data$FurLength)
data$Vaccinated = as.factor(data$Vaccinated)
data$Gender = as.factor(data$Gender)
# Only looking at profiles with 1 animal
data = subset(data, data$Quantity == 1)
data = subset(data, ! data$AdoptionSpeed == 4)
# Only pulling the columns we want to look at
dat = data[c('Type', 'Age', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt','VideoAmt', 'AdoptionSpeed')]
summary(dat)
# Adding random values
#dat$ASnum = NaN
#dat$ASnum[dat$AdoptionSpeed == 0] = 0
#dat$ASnum[dat$AdoptionSpeed == 1] = floor(runif(sum(dat$AdoptionSpeed == 1), 1, 8))
#dat$ASnum[dat$AdoptionSpeed == 2] = floor(runif(sum(dat$AdoptionSpeed == 2), 8, 31))
#dat$ASnum[dat$AdoptionSpeed == 3] = floor(runif(sum(dat$AdoptionSpeed == 3), 31, 91))
#dat$ASnum[dat$AdoptionSpeed == 4] = 100 -- this line isn't necessary because we exclude animals that have this adoption speed
summary(dat)
dataTGMFV = dat[, c('Type','Gender','MaturitySize','FurLength','Vaccinated','AdoptionSpeed')]
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 0|dat$AdoptionSpeed == 1] = 0
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 2|dat$AdoptionSpeed == 3|dat$AdoptionSpeed == 4 ] = 1
dataTGMFV$AdoptionSpeed = factor(dataTGMFV$AdoptionSpeed, levels = c(0,1))
str(dataTGMFV)
loadPkg("leaps")
#This is essentially best fit
reg.best10 <- regsubsets(AdoptionSpeed~. , data = dataTGMFV, nvmax = 10, nbest = 1, method = "exhaustive")  # leaps::regsubsets() - Model selection by exhaustive (default) search, forward or backward stepwise, or sequential replacement
#The plot will show the Adjust R^2 when using the variables across the bottom
plot(reg.best10, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10, scale = "r2", main = "R^2")
# In the "leaps" package, we can use scale=c("bic","Cp","adjr2","r2")
plot(reg.best10, scale = "bic", main = "BIC")
plot(reg.best10, scale = "Cp", main = "Cp")
summary(reg.best10)
# petFeaturetable1 = glm(AdoptionSpeed ~ Age+Type+Gender+MaturitySize+FurLength+Vaccinated, data = dataTGMFV, family = "binomial")
petFeaturetableAll = glm(AdoptionSpeed ~Type+Gender+MaturitySize+FurLength+Vaccinated, data = dataTGMFV, family = "binomial")
# petFeaturetableR2 = glm(AdoptionSpeed ~ Type+Gender+MaturitySize+FurLength+Vaccinated, data = dataTGMFV, family = "binomial")
# petFeaturetable = glm(AdoptionSpeed ~Vaccinated, data = dataTGMFV, family = "binomial")
summary(petFeaturetableAll)
loadPkg("regclass")
loadPkg("ModelMetrics")
# xkabledply( confusion_matrix(petFeaturetableAll), title = "Confusion matrix from Logit Model" )
pred_ = as.factor(ifelse(predict(petFeaturetableAll, dataTGMFV, type="response")>0.4,"1","0"))
unloadPkg("regclass")
confusionMatrix( pred_, as.factor(dataTGMFV$AdoptionSpeed))
loadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
petLogitHoslem = hoslem.test(dataTGMFV$AdoptionSpeed, fitted(petFeaturetableAll)) # Hosmer and Lemeshow test, a chi-squared test
unloadPkg("ResourceSelection")
petLogitHoslem
loadPkg("pROC") # receiver operating characteristic curve, gives the diagnostic ability of a binary classifier system as its discrimination threshold is varied. The curve is on sensitivity/recall/true-positive-rate vs false_alarm/false-positive-rate/fall-out.
prob=predict(petFeaturetableAll, type = "response" )
dataTGMFV$prob=prob
h <- roc(AdoptionSpeed~prob, data=dataTGMFV)
auc(h) # area-under-curve prefer 0.8 or higher.
dataTGMFV = dat[, c('Type','Gender','MaturitySize','FurLength','Vaccinated','AdoptionSpeed')]
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 0|dat$AdoptionSpeed == 1] = 0
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 2|dat$AdoptionSpeed == 3|dat$AdoptionSpeed == 4 ] = 1
dataTGMFV$AdoptionSpeed = factor(dataTGMFV$AdoptionSpeed)
str(dataTGMFV)
dataTGMFV = dat[, c('Type','Gender','MaturitySize','FurLength','Vaccinated','AdoptionSpeed')]
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 0|dat$AdoptionSpeed == 1] = 0
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 2|dat$AdoptionSpeed == 3|dat$AdoptionSpeed == 4 ] = 1
droplevels(dataTGMFV$AdoptionSpeed)
str(dataTGMFV)
dataTGMFV = dat[, c('Type','Gender','MaturitySize','FurLength','Vaccinated','AdoptionSpeed')]
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 0|dat$AdoptionSpeed == 1] = 0
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 2|dat$AdoptionSpeed == 3|dat$AdoptionSpeed == 4 ] = 1
dataTGMFV$AdoptionSpeed = droplevels(dataTGMFV$AdoptionSpeed)
str(dataTGMFV)
loadPkg("leaps")
#This is essentially best fit
reg.best10 <- regsubsets(AdoptionSpeed~. , data = dataTGMFV, nvmax = 10, nbest = 1, method = "exhaustive")  # leaps::regsubsets() - Model selection by exhaustive (default) search, forward or backward stepwise, or sequential replacement
#The plot will show the Adjust R^2 when using the variables across the bottom
plot(reg.best10, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10, scale = "r2", main = "R^2")
# In the "leaps" package, we can use scale=c("bic","Cp","adjr2","r2")
plot(reg.best10, scale = "bic", main = "BIC")
plot(reg.best10, scale = "Cp", main = "Cp")
summary(reg.best10)
# petFeaturetable1 = glm(AdoptionSpeed ~ Age+Type+Gender+MaturitySize+FurLength+Vaccinated, data = dataTGMFV, family = "binomial")
petFeaturetableAll = glm(AdoptionSpeed ~Type+Gender+MaturitySize+FurLength+Vaccinated, data = dataTGMFV, family = "binomial")
# petFeaturetableR2 = glm(AdoptionSpeed ~ Type+Gender+MaturitySize+FurLength+Vaccinated, data = dataTGMFV, family = "binomial")
# petFeaturetable = glm(AdoptionSpeed ~Vaccinated, data = dataTGMFV, family = "binomial")
summary(petFeaturetableAll)
loadPkg("regclass")
loadPkg("ModelMetrics")
# xkabledply( confusion_matrix(petFeaturetableAll), title = "Confusion matrix from Logit Model" )
pred_ = as.factor(ifelse(predict(petFeaturetableAll, dataTGMFV, type="response")>0.4,"1","0"))
unloadPkg("regclass")
confusionMatrix( pred_, as.factor(dataTGMFV$AdoptionSpeed))
loadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
petLogitHoslem = hoslem.test(dataTGMFV$AdoptionSpeed, fitted(petFeaturetableAll)) # Hosmer and Lemeshow test, a chi-squared test
unloadPkg("ResourceSelection")
petLogitHoslem
loadPkg("pROC") # receiver operating characteristic curve, gives the diagnostic ability of a binary classifier system as its discrimination threshold is varied. The curve is on sensitivity/recall/true-positive-rate vs false_alarm/false-positive-rate/fall-out.
prob=predict(petFeaturetableAll, type = "response" )
dataTGMFV$prob=prob
h <- roc(AdoptionSpeed~prob, data=dataTGMFV)
auc(h) # area-under-curve prefer 0.8 or higher.
dataTGMFV = dat[, c('Type','Gender','MaturitySize','FurLength','Vaccinated','AdoptionSpeed')]
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 0|dat$AdoptionSpeed == 1] = 0
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 2|dat$AdoptionSpeed == 3|dat$AdoptionSpeed == 4 ] = 1
dataTGMFV$AdoptionSpeed = droplevels(dataTGMFV$AdoptionSpeed)
str(dataTGMFV)
dataTGMFV$AdoptionSpeed
dataTGMFV = dat[, c('Type','Gender','MaturitySize','FurLength','Vaccinated','AdoptionSpeed')]
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 0|dat$AdoptionSpeed == 1] = 0
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 2|dat$AdoptionSpeed == 3|dat$AdoptionSpeed == 4 ] = 1
dataTGMFV$AdoptionSpeed = droplevels(dataTGMFV$AdoptionSpeed)
dataTGMFV$AdoptionSpeed = factor(dataTGMFV$AdoptionSpeed)
str(dataTGMFV)
loadPkg("leaps")
#This is essentially best fit
reg.best10 <- regsubsets(AdoptionSpeed~. , data = dataTGMFV, nvmax = 10, nbest = 1, method = "exhaustive")  # leaps::regsubsets() - Model selection by exhaustive (default) search, forward or backward stepwise, or sequential replacement
#The plot will show the Adjust R^2 when using the variables across the bottom
plot(reg.best10, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10, scale = "r2", main = "R^2")
# In the "leaps" package, we can use scale=c("bic","Cp","adjr2","r2")
plot(reg.best10, scale = "bic", main = "BIC")
plot(reg.best10, scale = "Cp", main = "Cp")
summary(reg.best10)
# petFeaturetable1 = glm(AdoptionSpeed ~ Age+Type+Gender+MaturitySize+FurLength+Vaccinated, data = dataTGMFV, family = "binomial")
petFeaturetableAll = glm(AdoptionSpeed ~Type+Gender+MaturitySize+FurLength+Vaccinated, data = dataTGMFV, family = "binomial")
# petFeaturetableR2 = glm(AdoptionSpeed ~ Type+Gender+MaturitySize+FurLength+Vaccinated, data = dataTGMFV, family = "binomial")
# petFeaturetable = glm(AdoptionSpeed ~Vaccinated, data = dataTGMFV, family = "binomial")
summary(petFeaturetableAll)
loadPkg("regclass")
loadPkg("ModelMetrics")
# xkabledply( confusion_matrix(petFeaturetableAll), title = "Confusion matrix from Logit Model" )
pred_ = as.factor(ifelse(predict(petFeaturetableAll, dataTGMFV, type="response")>0.4,"1","0"))
unloadPkg("regclass")
confusionMatrix( pred_, as.factor(dataTGMFV$AdoptionSpeed))
loadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
petLogitHoslem = hoslem.test(dataTGMFV$AdoptionSpeed, fitted(petFeaturetableAll)) # Hosmer and Lemeshow test, a chi-squared test
unloadPkg("ResourceSelection")
petLogitHoslem
loadPkg("pROC") # receiver operating characteristic curve, gives the diagnostic ability of a binary classifier system as its discrimination threshold is varied. The curve is on sensitivity/recall/true-positive-rate vs false_alarm/false-positive-rate/fall-out.
prob=predict(petFeaturetableAll, type = "response" )
dataTGMFV$prob=prob
h <- roc(AdoptionSpeed~prob, data=dataTGMFV)
auc(h) # area-under-curve prefer 0.8 or higher.
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F, echo = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
library("corrplot")
library("ezids")
library("gtsummary")
library('ggridges')
library('viridis')
library('wesanderson')
library('gridExtra')
library('leaps')
library('vtable')
library('pscl')
## Loading data
data = read.csv('datafile.csv',encoding = "UTF-8")
initialrows = nrow(data)
data$AdoptionSpeed <- factor(data$AdoptionSpeed, order=T, levels = c(0,1,2,3,4))
# converting the data types we want - categorical
data$Type = as.factor(data$Type)
data$MaturitySize = as.factor(data$MaturitySize)
data$FurLength = as.factor(data$FurLength)
data$Vaccinated = as.factor(data$Vaccinated)
data$Gender = as.factor(data$Gender)
# Only looking at profiles with 1 animal
data = subset(data, data$Quantity == 1)
data = subset(data, ! data$AdoptionSpeed == 4)
# Only pulling the columns we want to look at
dat = data[c('Type', 'Age', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt','VideoAmt', 'AdoptionSpeed')]
summary(dat)
# Adding random values
#dat$ASnum = NaN
#dat$ASnum[dat$AdoptionSpeed == 0] = 0
#dat$ASnum[dat$AdoptionSpeed == 1] = floor(runif(sum(dat$AdoptionSpeed == 1), 1, 8))
#dat$ASnum[dat$AdoptionSpeed == 2] = floor(runif(sum(dat$AdoptionSpeed == 2), 8, 31))
#dat$ASnum[dat$AdoptionSpeed == 3] = floor(runif(sum(dat$AdoptionSpeed == 3), 31, 91))
#dat$ASnum[dat$AdoptionSpeed == 4] = 100 -- this line isn't necessary because we exclude animals that have this adoption speed
summary(dat)
dataTGMFV = dat[, c('Type','Gender','MaturitySize','FurLength','Vaccinated','AdoptionSpeed')]
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 0|dat$AdoptionSpeed == 1] = 0
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 2|dat$AdoptionSpeed == 3|dat$AdoptionSpeed == 4 ] = 1
dataTGMFV$AdoptionSpeed = droplevels(dataTGMFV$AdoptionSpeed)
dataTGMFV$AdoptionSpeed = factor(dataTGMFV$AdoptionSpeed)
str(dataTGMFV)
loadPkg("leaps")
#This is essentially best fit
reg.best10 <- regsubsets(AdoptionSpeed~. , data = dataTGMFV, nvmax = 10, nbest = 1, method = "exhaustive")  # leaps::regsubsets() - Model selection by exhaustive (default) search, forward or backward stepwise, or sequential replacement
#The plot will show the Adjust R^2 when using the variables across the bottom
plot(reg.best10, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10, scale = "r2", main = "R^2")
# In the "leaps" package, we can use scale=c("bic","Cp","adjr2","r2")
plot(reg.best10, scale = "bic", main = "BIC")
plot(reg.best10, scale = "Cp", main = "Cp")
summary(reg.best10)
# petFeaturetable1 = glm(AdoptionSpeed ~ Age+Type+Gender+MaturitySize+FurLength+Vaccinated, data = dataTGMFV, family = "binomial")
petFeaturetableAll = glm(AdoptionSpeed ~Type+Gender+MaturitySize+FurLength+Vaccinated, data = dataTGMFV, family = "binomial")
# petFeaturetableR2 = glm(AdoptionSpeed ~ Type+Gender+MaturitySize+FurLength+Vaccinated, data = dataTGMFV, family = "binomial")
# petFeaturetable = glm(AdoptionSpeed ~Vaccinated, data = dataTGMFV, family = "binomial")
summary(petFeaturetableAll)
loadPkg("regclass")
loadPkg("ModelMetrics")
# xkabledply( confusion_matrix(petFeaturetableAll), title = "Confusion matrix from Logit Model" )
pred_ = as.factor(ifelse(predict(petFeaturetableAll, dataTGMFV, type="response")>0.4,"1","0"))
unloadPkg("regclass")
confusionMatrix( pred_, as.factor(dataTGMFV$AdoptionSpeed))
loadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
petLogitHoslem = hoslem.test(dataTGMFV$AdoptionSpeed, fitted(petFeaturetableAll)) # Hosmer and Lemeshow test, a chi-squared test
unloadPkg("ResourceSelection")
petLogitHoslem
loadPkg("pROC") # receiver operating characteristic curve, gives the diagnostic ability of a binary classifier system as its discrimination threshold is varied. The curve is on sensitivity/recall/true-positive-rate vs false_alarm/false-positive-rate/fall-out.
prob=predict(petFeaturetableAll, type = "response" )
dataTGMFV$prob=prob
h <- roc(AdoptionSpeed~prob, data=dataTGMFV)
auc(h) # area-under-curve prefer 0.8 or higher.
dataTGMFV$AdoptionSpeed
dataTGMFV = dat[, c('Type','Gender','MaturitySize','FurLength','Vaccinated','AdoptionSpeed')]
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 0|dat$AdoptionSpeed == 1] = 0
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 2|dat$AdoptionSpeed == 3|dat$AdoptionSpeed == 4 ] = 1
# dataTGMFV$AdoptionSpeed = droplevels(dataTGMFV$AdoptionSpeed)
dataTGMFV$AdoptionSpeed = factor(dataTGMFV$AdoptionSpeed)
str(dataTGMFV)
dataTGMFV = dat[, c('Type','Gender','MaturitySize','FurLength','Vaccinated','AdoptionSpeed')]
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 0|dat$AdoptionSpeed == 1] = 0
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 2|dat$AdoptionSpeed == 3|dat$AdoptionSpeed == 4 ] = 1
# dataTGMFV$AdoptionSpeed = droplevels(dataTGMFV$AdoptionSpeed)
# dataTGMFV$AdoptionSpeed = factor(dataTGMFV$AdoptionSpeed)
str(dataTGMFV)
loadPkg("leaps")
#This is essentially best fit
reg.best10 <- regsubsets(AdoptionSpeed~. , data = dataTGMFV, nvmax = 10, nbest = 1, method = "exhaustive")  # leaps::regsubsets() - Model selection by exhaustive (default) search, forward or backward stepwise, or sequential replacement
#The plot will show the Adjust R^2 when using the variables across the bottom
plot(reg.best10, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10, scale = "r2", main = "R^2")
# In the "leaps" package, we can use scale=c("bic","Cp","adjr2","r2")
plot(reg.best10, scale = "bic", main = "BIC")
plot(reg.best10, scale = "Cp", main = "Cp")
summary(reg.best10)
# petFeaturetable1 = glm(AdoptionSpeed ~ Age+Type+Gender+MaturitySize+FurLength+Vaccinated, data = dataTGMFV, family = "binomial")
petFeaturetableAll = glm(AdoptionSpeed ~Type+Gender+MaturitySize+FurLength+Vaccinated, data = dataTGMFV, family = "binomial")
# petFeaturetableR2 = glm(AdoptionSpeed ~ Type+Gender+MaturitySize+FurLength+Vaccinated, data = dataTGMFV, family = "binomial")
# petFeaturetable = glm(AdoptionSpeed ~Vaccinated, data = dataTGMFV, family = "binomial")
summary(petFeaturetableAll)
loadPkg("regclass")
loadPkg("ModelMetrics")
# xkabledply( confusion_matrix(petFeaturetableAll), title = "Confusion matrix from Logit Model" )
pred_ = as.factor(ifelse(predict(petFeaturetableAll, dataTGMFV, type="response")>0.4,"1","0"))
unloadPkg("regclass")
confusionMatrix( pred_, as.factor(dataTGMFV$AdoptionSpeed))
loadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
petLogitHoslem = hoslem.test(dataTGMFV$AdoptionSpeed, fitted(petFeaturetableAll)) # Hosmer and Lemeshow test, a chi-squared test
unloadPkg("ResourceSelection")
petLogitHoslem
loadPkg("pROC") # receiver operating characteristic curve, gives the diagnostic ability of a binary classifier system as its discrimination threshold is varied. The curve is on sensitivity/recall/true-positive-rate vs false_alarm/false-positive-rate/fall-out.
prob=predict(petFeaturetableAll, type = "response" )
dataTGMFV$prob=prob
h <- roc(AdoptionSpeed~prob, data=dataTGMFV)
auc(h) # area-under-curve prefer 0.8 or higher.
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F, echo = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
library("corrplot")
library("ezids")
library("gtsummary")
library('ggridges')
library('viridis')
library('wesanderson')
library('gridExtra')
library('leaps')
library('vtable')
library('pscl')
## Loading data
data = read.csv('datafile.csv',encoding = "UTF-8")
initialrows = nrow(data)
data$AdoptionSpeed <- factor(data$AdoptionSpeed, order=T, levels = c(0,1,2,3,4))
# converting the data types we want - categorical
data$Type = as.factor(data$Type)
data$MaturitySize = as.factor(data$MaturitySize)
data$FurLength = as.factor(data$FurLength)
data$Vaccinated = as.factor(data$Vaccinated)
data$Gender = as.factor(data$Gender)
# Only looking at profiles with 1 animal
data = subset(data, data$Quantity == 1)
data = subset(data, ! data$AdoptionSpeed == 4)
# Only pulling the columns we want to look at
dat = data[c('Type', 'Age', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt','VideoAmt', 'AdoptionSpeed')]
summary(dat)
# Adding random values
#dat$ASnum = NaN
#dat$ASnum[dat$AdoptionSpeed == 0] = 0
#dat$ASnum[dat$AdoptionSpeed == 1] = floor(runif(sum(dat$AdoptionSpeed == 1), 1, 8))
#dat$ASnum[dat$AdoptionSpeed == 2] = floor(runif(sum(dat$AdoptionSpeed == 2), 8, 31))
#dat$ASnum[dat$AdoptionSpeed == 3] = floor(runif(sum(dat$AdoptionSpeed == 3), 31, 91))
#dat$ASnum[dat$AdoptionSpeed == 4] = 100 -- this line isn't necessary because we exclude animals that have this adoption speed
summary(dat)
dataTGMFV = dat[, c('Type','Gender','MaturitySize','FurLength','Vaccinated','AdoptionSpeed')]
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 0|dat$AdoptionSpeed == 1] = 0
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 2|dat$AdoptionSpeed == 3|dat$AdoptionSpeed == 4 ] = 1
# dataTGMFV$AdoptionSpeed = droplevels(dataTGMFV$AdoptionSpeed)
# dataTGMFV$AdoptionSpeed = factor(dataTGMFV$AdoptionSpeed)
str(dataTGMFV)
loadPkg("leaps")
#This is essentially best fit
reg.best10 <- regsubsets(AdoptionSpeed~. , data = dataTGMFV, nvmax = 10, nbest = 1, method = "exhaustive")  # leaps::regsubsets() - Model selection by exhaustive (default) search, forward or backward stepwise, or sequential replacement
#The plot will show the Adjust R^2 when using the variables across the bottom
plot(reg.best10, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10, scale = "r2", main = "R^2")
# In the "leaps" package, we can use scale=c("bic","Cp","adjr2","r2")
plot(reg.best10, scale = "bic", main = "BIC")
plot(reg.best10, scale = "Cp", main = "Cp")
summary(reg.best10)
# petFeaturetable1 = glm(AdoptionSpeed ~ Age+Type+Gender+MaturitySize+FurLength+Vaccinated, data = dataTGMFV, family = "binomial")
petFeaturetableAll = glm(AdoptionSpeed ~Type+Gender+MaturitySize+FurLength+Vaccinated, data = dataTGMFV, family = "binomial")
# petFeaturetableR2 = glm(AdoptionSpeed ~ Type+Gender+MaturitySize+FurLength+Vaccinated, data = dataTGMFV, family = "binomial")
# petFeaturetable = glm(AdoptionSpeed ~Vaccinated, data = dataTGMFV, family = "binomial")
summary(petFeaturetableAll)
loadPkg("regclass")
loadPkg("ModelMetrics")
# xkabledply( confusion_matrix(petFeaturetableAll), title = "Confusion matrix from Logit Model" )
pred_ = as.factor(ifelse(predict(petFeaturetableAll, dataTGMFV, type="response")>0.4,"1","0"))
unloadPkg("regclass")
confusionMatrix( pred_, as.factor(dataTGMFV$AdoptionSpeed))
loadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
petLogitHoslem = hoslem.test(dataTGMFV$AdoptionSpeed, fitted(petFeaturetableAll)) # Hosmer and Lemeshow test, a chi-squared test
unloadPkg("ResourceSelection")
petLogitHoslem
loadPkg("pROC") # receiver operating characteristic curve, gives the diagnostic ability of a binary classifier system as its discrimination threshold is varied. The curve is on sensitivity/recall/true-positive-rate vs false_alarm/false-positive-rate/fall-out.
prob=predict(petFeaturetableAll, type = "response" )
dataTGMFV$prob=prob
h <- roc(AdoptionSpeed~prob, data=dataTGMFV)
auc(h) # area-under-curve prefer 0.8 or higher.
View(dataTGMFV)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F, echo = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
library("corrplot")
library("ezids")
library("gtsummary")
library('ggridges')
library('viridis')
library('wesanderson')
library('gridExtra')
library('leaps')
library('vtable')
library('pscl')
## Loading data
data = read.csv('datafile.csv',encoding = "UTF-8")
initialrows = nrow(data)
data$AdoptionSpeed <- factor(data$AdoptionSpeed, order=T, levels = c(0,1,2,3,4))
# converting the data types we want - categorical
data$Type = as.factor(data$Type)
data$MaturitySize = as.factor(data$MaturitySize)
data$FurLength = as.factor(data$FurLength)
data$Vaccinated = as.factor(data$Vaccinated)
data$Gender = as.factor(data$Gender)
# Only looking at profiles with 1 animal
data = subset(data, data$Quantity == 1)
data = subset(data, ! data$AdoptionSpeed == 4)
# Only pulling the columns we want to look at
dat = data[c('Type', 'Age', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt','VideoAmt', 'AdoptionSpeed')]
summary(dat)
# Adding random values
#dat$ASnum = NaN
#dat$ASnum[dat$AdoptionSpeed == 0] = 0
#dat$ASnum[dat$AdoptionSpeed == 1] = floor(runif(sum(dat$AdoptionSpeed == 1), 1, 8))
#dat$ASnum[dat$AdoptionSpeed == 2] = floor(runif(sum(dat$AdoptionSpeed == 2), 8, 31))
#dat$ASnum[dat$AdoptionSpeed == 3] = floor(runif(sum(dat$AdoptionSpeed == 3), 31, 91))
#dat$ASnum[dat$AdoptionSpeed == 4] = 100 -- this line isn't necessary because we exclude animals that have this adoption speed
summary(dat)
dataTGMFV = dat[, c('Type','Gender','MaturitySize','FurLength','Vaccinated','AdoptionSpeed')]
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 0|dat$AdoptionSpeed == 1] = 0
dataTGMFV$AdoptionSpeed[dat$AdoptionSpeed == 2|dat$AdoptionSpeed == 3|dat$AdoptionSpeed == 4 ] = 1
# dataTGMFV$AdoptionSpeed = droplevels(dataTGMFV$AdoptionSpeed)
# dataTGMFV$AdoptionSpeed = factor(dataTGMFV$AdoptionSpeed)
str(dataTGMFV)
View(dataTGMFV)
View(dataTGMFV)
loadPkg("leaps")
#This is essentially best fit
reg.best10 <- regsubsets(AdoptionSpeed~. , data = dataTGMFV, nvmax = 10, nbest = 1, method = "exhaustive")  # leaps::regsubsets() - Model selection by exhaustive (default) search, forward or backward stepwise, or sequential replacement
#The plot will show the Adjust R^2 when using the variables across the bottom
plot(reg.best10, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10, scale = "r2", main = "R^2")
# In the "leaps" package, we can use scale=c("bic","Cp","adjr2","r2")
plot(reg.best10, scale = "bic", main = "BIC")
plot(reg.best10, scale = "Cp", main = "Cp")
summary(reg.best10)
# petFeaturetable1 = glm(AdoptionSpeed ~ Age+Type+Gender+MaturitySize+FurLength+Vaccinated, data = dataTGMFV, family = "binomial")
petFeaturetableAll = glm(AdoptionSpeed ~Type+Gender+MaturitySize+FurLength+Vaccinated, data = dataTGMFV, family = "binomial")
# petFeaturetableR2 = glm(AdoptionSpeed ~ Type+Gender+MaturitySize+FurLength+Vaccinated, data = dataTGMFV, family = "binomial")
# petFeaturetable = glm(AdoptionSpeed ~Vaccinated, data = dataTGMFV, family = "binomial")
summary(petFeaturetableAll)
View(dataTGMFV)
View(dataTGMFV)
loadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
petLogitHoslem = hoslem.test(dataTGMFV$AdoptionSpeed, fitted(petFeaturetableAll)) # Hosmer and Lemeshow test, a chi-squared test
unloadPkg("ResourceSelection")
petLogitHoslem
loadPkg("pROC") # receiver operating characteristic curve, gives the diagnostic ability of a binary classifier system as its discrimination threshold is varied. The curve is on sensitivity/recall/true-positive-rate vs false_alarm/false-positive-rate/fall-out.
prob=predict(petFeaturetableAll, type = "response" )
dataTGMFV$prob=prob
h <- roc(AdoptionSpeed~prob, data=dataTGMFV)
auc(h) # area-under-curve prefer 0.8 or higher.
View(dataTGMFV)
loadPkg("pROC") # receiver operating characteristic curve, gives the diagnostic ability of a binary classifier system as its discrimination threshold is varied. The curve is on sensitivity/recall/true-positive-rate vs false_alarm/false-positive-rate/fall-out.
prob=predict(admitLogit, type = "response" )
# The package "ezids" (EZ Intro to Data Science) includes a lot of the helper functions we developed for the course.
# Some of the frequently used functions are loadPkg(), xkabledply(), xkablesummary(), uzscale(), etc.
library(ezids)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
loadPkg("ggplot2")
Admit <- data.frame(read.csv("LogRegAdmit.csv"))
head(Admit)
summary(Admit)
xkablesummary(Admit)
# find  sd for all columns, using sapply
varSD = sapply(Admit, sd)
varSD
xkabledply(as.table(varSD), title = "The sd for each variable in Admit", wide = TRUE)
admitranktable = xtabs(~ admit + rank, data = Admit)
admitranktable
chisqres = chisq.test(admitranktable)
chisqres
Admit$admit <- factor(Admit$admit)
Admit$rank <- factor(Admit$rank)
admitLogit <- glm(admit ~ gre + gpa + rank, data = Admit, family = "binomial")
# admitLogit <- glm(admit ~ gre + gpa + rank, data = Admit, binomial(link = "logit") )  # same result, slightly different syntax
summary(admitLogit)
xkabledply(admitLogit, title = paste("Logistic Regression :", format(formula(admitLogit)) ))
expcoeff = exp(coef(admitLogit))
# expcoeff
xkabledply( as.table(expcoeff), title = "Exponential of coefficients in Logit Reg" )
admitLogit$fitted.values[1]
# OR
predict(admitLogit)[1]  # gives you the logit(p) or ln(p/q) value
1/(1+exp(-predict(admitLogit)[1]))
# OR
predict(admitLogit, type = "response")[1]
## CIs using profiled log-likelihood
# confint(admitLogit)
xkabledply( confint(admitLogit), title = "CIs using profiled log-likelihood" )
## CIs using standard errors
# confint.default(admitLogit)
xkabledply( confint.default(admitLogit), title = "CIs using standard errors" )
loadPkg("regclass")
# confusion_matrix(admitLogit)
xkabledply( confusion_matrix(admitLogit), title = "Confusion matrix from Logit Model" )
unloadPkg("regclass")
loadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
admitLogitHoslem = hoslem.test(Admit$admit, fitted(admitLogit)) # Hosmer and Lemeshow test, a chi-squared test
unloadPkg("ResourceSelection")
admitLogitHoslem
# Have not found a good way to display it.
loadPkg("pROC") # receiver operating characteristic curve, gives the diagnostic ability of a binary classifier system as its discrimination threshold is varied. The curve is on sensitivity/recall/true-positive-rate vs false_alarm/false-positive-rate/fall-out.
prob=predict(admitLogit, type = "response" )
Admit$prob=prob
h <- roc(admit~prob, data=Admit)
auc(h) # area-under-curve prefer 0.8 or higher.
