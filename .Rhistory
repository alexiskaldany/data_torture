older = subset(datage, datage$puppy ==0)
puppy_proportion = nrow(puppies) * 100/nrow(dat)
loadPkg("bestglm")
loadPkg("leaps")
datage$y <- datage$puppy
datage <- na.omit(datage)
# using bestglm as it has feature selection built in
logit_pups <- bestglm(Xy = datage, family = binomial, IC = "AIC", method = "exhaustive")
summary(logit_pups)
unloadPkg("bestglm")
logit_pups$BestModels
summary(logit_pups$BestModels)
loadPkg("bestglm")
loadPkg("leaps")
datage$y <- datage$puppy
datage <- datage[, c('Type', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt', 'VideoAmt', 'AdoptionSpeed')]
datage <- na.omit(datage)
# using bestglm as it has feature selection built in
logit_pups <- bestglm(Xy = datage, family = binomial, IC = "AIC", method = "exhaustive")
View(datage)
View(datage)
loadPkg("bestglm")
loadPkg("leaps")
datage$y <- datage$puppy
datage <- datage[, c('Type', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt', 'VideoAmt', 'AdoptionSpeed', 'y')]
datage <- dat[ ,c('Type','Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt', 'VideoAmt', 'AdoptionSpeed') ]
datage$puppy = NaN
datage$puppy[dat$Age <= 3] = 1
datage$puppy[dat$Age > 3] = 0
datage$puppy = as.factor(datage$puppy)
puppies = subset(datage, datage$puppy == 1)
older = subset(datage, datage$puppy ==0)
puppy_proportion = nrow(puppies) * 100/nrow(dat)
View(datage)
loadPkg("bestglm")
loadPkg("leaps")
datage$y <- datage$puppy
datage <- datage[, c('Type', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt', 'VideoAmt', 'AdoptionSpeed', 'y')]
datage <- na.omit(datage)
# using bestglm as it has feature selection built in
logit_pups <- bestglm(Xy = datage, family = binomial, IC = "AIC", method = "exhaustive")
summary(logit_pups)
unloadPkg("bestglm")
logit_pups$BestModels
summary(logit_pups$BestModels)
pup_logit <- glm(y ~ Type + Gender + MaturitySize + FurLength + Vaccinated + VideoAmt + AdoptionSpeed, data = datage, family = "binomial")
pup_logit <- glm(y ~ Type + Gender + MaturitySize + FurLength + Vaccinated + VideoAmt + AdoptionSpeed, data = datage, family = "binomial")
loadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
ageHoslem = hoslem.test(datage$y, fitted(pup_logit)) # Hosmer and Lemeshow test, a chi-squared test
ageHoslem
unloadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
loadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
ageHoslem = hoslem.test(datage$y, fitted(pup_logit)) # Hosmer and Lemeshow test, a chi-squared test
ageHoslem
unloadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
loadPkg("pROC")
prob=predict(pup_logit, type = "response" )
datage$prob=prob
h <- roc(y~prob, data=datage)
plot(h)
auc(h)
loadPkg("rpart")
puppy_tree <- rpart(y ~ .,data = datage, method="class", control = list(maxdepth = 4))
printcp(kyphosisfit) # display the results
printcp(puppy_tree) # display the results
plotcp(puppy_tree) # visualize cross-validation results
summary(puppy_tree) # detailed summary of splits
View(datage)
loadPkg("rpart")
datage <- datage[, c('Type', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt', 'VideoAmt', 'AdoptionSpeed', 'y')]
puppy_tree <- rpart(y ~ .,data = datage, method="class", control = list(maxdepth = 4))
printcp(puppy_tree) # display the results
plotcp(puppy_tree) # visualize cross-validation results
summary(puppy_tree) # detailed summary of splits
View(puppies)
loadPkg("rpart")
datage <- datage[, c('Type', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt', 'VideoAmt', 'AdoptionSpeed', 'y')]
puppy_tree <- rpart(y ~ .,data = datage, method="class", control = list(maxdepth = 4))
View(datage)
printcp(puppy_tree) # display the results
plotcp(puppy_tree) # visualize cross-validation results
summary(puppy_tree) # detailed summary of splits
plot(puppy_tree, uniform=TRUE, main="Classification Tree for Puppy")
text(puppy_tree, use.n=TRUE, all=TRUE, cex=.8)
plot(puppy_tree, uniform=TRUE, main="Classification Tree for Puppy")
text(puppy_tree, use.n=TRUE, all=TRUE, cex=.8)
# The package "ezids" (EZ Intro to Data Science) includes a lot of the helper functions we developed for the course.
# Some of the frequently used functions are loadPkg(), xkabledply(), xkablesummary(), uzscale(), etc.
library(ezids)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
loadPkg("rpart") # Classification trees, rpart(formula, data=, method=,control=)
set.seed(1)
kyphosisfit <- rpart(Kyphosis ~ Age + Number + Start, data=kyphosis, method="class", control = list(maxdepth = 4) )
# kyphosisfit <- rpart(Kyphosis ~ Age + Number + Start, data=kyphosis, method="class", control = {rpart.control list} )
# rpart.control(maxdepth = 30, minsplit = 20, minbucket = round(minsplit/3), cp = 0.01, maxcompete = 4, maxsurrogate = 5, usesurrogate = 2, xval = 10, surrogatestyle = 0, ...)
printcp(kyphosisfit) # display the results
plotcp(kyphosisfit) # visualize cross-validation results
summary(kyphosisfit) # detailed summary of splits
# plot tree
plot(kyphosisfit, uniform=TRUE, main="Classification Tree for Kyphosis")
text(kyphosisfit, use.n=TRUE, all=TRUE, cex=.8)
# create attractive postcript plot of tree
post(kyphosisfit, file = "kythosisTree2.ps", title = "Classification Tree for Kythosis")
loadPkg("caret")
cm = confusionMatrix( predict(kyphosisfit, type = "class"), reference = kyphosis[, "Kyphosis"] )
print('Overall: ')
cm$overall
print('Class: ')
cm$byClass
unloadPkg("caret")
xkabledply(cm$table, "confusion matrix")
set.seed(1)
kyphosisfit <- rpart(Kyphosis ~ Age + Number + Start, data=kyphosis, method="class", control = list(maxdepth = 4) )
# kyphosisfit <- rpart(Kyphosis ~ Age + Number + Start, data=kyphosis, method="class", control = {rpart.control list} )
# rpart.control(maxdepth = 30, minsplit = 20, minbucket = round(minsplit/3), cp = 0.01, maxcompete = 4, maxsurrogate = 5, usesurrogate = 2, xval = 10, surrogatestyle = 0, ...)
printcp(kyphosisfit) # display the results
plotcp(kyphosisfit) # visualize cross-validation results
summary(kyphosisfit) # detailed summary of splits
# plot tree
plot(kyphosisfit, uniform=TRUE, main="Classification Tree for Kyphosis")
text(kyphosisfit, use.n=TRUE, all=TRUE, cex=.8)
View(kyphosisfit)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F, echo = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
library("corrplot")
library("ezids")
library("gtsummary")
library('ggridges')
library('viridis')
library('wesanderson')
library('gridExtra')
library('leaps')
library('vtable')
library('pscl')
## Loading data
data = read.csv('datafile.csv')
initialrows = nrow(data)
data$AdoptionSpeed <- factor(data$AdoptionSpeed, order=T, levels = c(0,1,2,3,4))
# converting the data types we want - categorical
data$Type = as.factor(data$Type)
data$MaturitySize = as.factor(data$MaturitySize)
data$FurLength = as.factor(data$FurLength)
data$Vaccinated = as.factor(data$Vaccinated)
data$Gender = as.factor(data$Gender)
# Only looking at profiles with 1 animal
data = subset(data, data$Quantity == 1)
data = subset(data, ! data$AdoptionSpeed == 4)
# Only pulling the columns we want to look at
dat = data[c('Type', 'Age', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt','VideoAmt', 'AdoptionSpeed')]
summary(dat)
# Adding random values
#dat$ASnum = NaN
#dat$ASnum[dat$AdoptionSpeed == 0] = 0
#dat$ASnum[dat$AdoptionSpeed == 1] = floor(runif(sum(dat$AdoptionSpeed == 1), 1, 8))
#dat$ASnum[dat$AdoptionSpeed == 2] = floor(runif(sum(dat$AdoptionSpeed == 2), 8, 31))
#dat$ASnum[dat$AdoptionSpeed == 3] = floor(runif(sum(dat$AdoptionSpeed == 3), 31, 91))
#dat$ASnum[dat$AdoptionSpeed == 4] = 100 -- this line isn't necessary because we exclude animals that have this adoption speed
summary(dat)
# creating a cleaned dataset without the animal type
datclean = dat[, c('Age', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt', 'VideoAmt', 'AdoptionSpeed')]
# labeling the target variable appropriately
datclean$y = dat[, c('Type')]
str(datclean)
loadPkg("bestglm")
# feature selection
res.bestglm <- bestglm(Xy = datclean, family = binomial,
IC = "AIC",
method = "exhaustive")
#summary(res.bestglm) # printing the summary
res.bestglm$BestModels
#summary(res.bestglm$BestModels)
unloadPkg("bestglm")
typeLogit <- glm(y ~ Age + Gender + MaturitySize + FurLength + Vaccinated + AdoptionSpeed + PhotoAmt, data = datclean, family = "binomial")
xkabledply(typeLogit, title = paste("Logistic Regression : Type ~ age+gender+size+fur+vaccinated+AdoptSpd+photos"))
loadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
typeHoslem = hoslem.test(datclean$y, fitted(typeLogit)) # Hosmer and Lemeshow test, a chi-squared test
typeHoslem
unloadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
loadPkg("pROC") # receiver operating characteristic curve, gives the diagnostic ability of a binary classifier system as its discrimination threshold is varied. The curve is on sensitivity/recall/true-positive-rate vs false_alarm/false-positive-rate/fall-out.
prob=predict(typeLogit, type = "response" )
datclean$prob=prob
h <- roc(y~prob, data=datclean)
plot(h)
auc(h)
loadPkg("pscl") # use pR2( ) function to calculate McFadden statistics for model eval
typePR = pR2(typeLogit)
typePR
unloadPkg("pscl")
loadPkg("gmodels")
# reloading the original dataframe to cancel all the factor variables
knndat = read.csv('datafile.csv')
knndat = subset(knndat, knndat$Quantity == 1)
knndat = subset(knndat, ! knndat$AdoptionSpeed == 4)
knndat = knndat[c('Type', 'Age', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt','VideoAmt', 'AdoptionSpeed')]
scaledknn = as.data.frame(scale(knndat[c(2, 7, 8)], center = TRUE, scale = TRUE)) # only scaling the numerical values
scaledknn[c('Type', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'AdoptionSpeed')] = knndat[c(1, 3, 4, 5, 6, 9)]
#sampling for train and test
set.seed(1000)
knn_sample <- sample(2, nrow(scaledknn), replace=TRUE, prob=c(0.7, 0.3))
train <- scaledknn[knn_sample==1, 1:3, 5:9]
test <- scaledknn[knn_sample==2, 1:3, 5:9]
typeknn.trainLabel = scaledknn[knn_sample==1, 4]
typeknn.testLabel = scaledknn[knn_sample==2, 4]
ResultDf = data.frame( k=numeric(0), Total.Accuracy= numeric(0), row.names = NULL )
for (kval in 3:20) {
tpred <- knn(train = train, test = test, cl=typeknn.trainLabel, k=kval)
cross <- CrossTable(typeknn.testLabel, tpred, prop.chisq = FALSE)
cm = confusionMatrix(tpred, reference = as.factor(typeknn.testLabel)) # from caret library
cmaccu = cm$overall['Accuracy']
cmt = data.frame(k=kval, Total.Accuracy = cmaccu, row.names = NULL ) # initialize a row of the metrics
ResultDf = rbind(ResultDf, cmt)
}
printcp(puppy_tree) # display the results
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F, echo = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
library("corrplot")
library("ezids")
library("gtsummary")
library('ggridges')
library('viridis')
library('wesanderson')
library('gridExtra')
library('leaps')
library('vtable')
library('pscl')
## Loading data
data = read.csv('datafile.csv')
initialrows = nrow(data)
data$AdoptionSpeed <- factor(data$AdoptionSpeed, order=T, levels = c(0,1,2,3,4))
# converting the data types we want - categorical
data$Type = as.factor(data$Type)
data$MaturitySize = as.factor(data$MaturitySize)
data$FurLength = as.factor(data$FurLength)
data$Vaccinated = as.factor(data$Vaccinated)
data$Gender = as.factor(data$Gender)
# Only looking at profiles with 1 animal
data = subset(data, data$Quantity == 1)
data = subset(data, ! data$AdoptionSpeed == 4)
# Only pulling the columns we want to look at
dat = data[c('Type', 'Age', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt','VideoAmt', 'AdoptionSpeed')]
summary(dat)
# Adding random values
#dat$ASnum = NaN
#dat$ASnum[dat$AdoptionSpeed == 0] = 0
#dat$ASnum[dat$AdoptionSpeed == 1] = floor(runif(sum(dat$AdoptionSpeed == 1), 1, 8))
#dat$ASnum[dat$AdoptionSpeed == 2] = floor(runif(sum(dat$AdoptionSpeed == 2), 8, 31))
#dat$ASnum[dat$AdoptionSpeed == 3] = floor(runif(sum(dat$AdoptionSpeed == 3), 31, 91))
#dat$ASnum[dat$AdoptionSpeed == 4] = 100 -- this line isn't necessary because we exclude animals that have this adoption speed
summary(dat)
# creating a cleaned dataset without the animal type
datclean = dat[, c('Age', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt', 'VideoAmt', 'AdoptionSpeed')]
# labeling the target variable appropriately
datclean$y = dat[, c('Type')]
str(datclean)
loadPkg("bestglm")
# feature selection
res.bestglm <- bestglm(Xy = datclean, family = binomial,
IC = "AIC",
method = "exhaustive")
#summary(res.bestglm) # printing the summary
res.bestglm$BestModels
#summary(res.bestglm$BestModels)
unloadPkg("bestglm")
typeLogit <- glm(y ~ Age + Gender + MaturitySize + FurLength + Vaccinated + AdoptionSpeed + PhotoAmt, data = datclean, family = "binomial")
xkabledply(typeLogit, title = paste("Logistic Regression : Type ~ age+gender+size+fur+vaccinated+AdoptSpd+photos"))
loadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
typeHoslem = hoslem.test(datclean$y, fitted(typeLogit)) # Hosmer and Lemeshow test, a chi-squared test
typeHoslem
unloadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
loadPkg("pROC") # receiver operating characteristic curve, gives the diagnostic ability of a binary classifier system as its discrimination threshold is varied. The curve is on sensitivity/recall/true-positive-rate vs false_alarm/false-positive-rate/fall-out.
prob=predict(typeLogit, type = "response" )
datclean$prob=prob
h <- roc(y~prob, data=datclean)
plot(h)
auc(h)
loadPkg("pscl") # use pR2( ) function to calculate McFadden statistics for model eval
typePR = pR2(typeLogit)
typePR
unloadPkg("pscl")
loadPkg("gmodels")
# reloading the original dataframe to cancel all the factor variables
knndat = read.csv('datafile.csv')
knndat = subset(knndat, knndat$Quantity == 1)
knndat = subset(knndat, ! knndat$AdoptionSpeed == 4)
knndat = knndat[c('Type', 'Age', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt','VideoAmt', 'AdoptionSpeed')]
scaledknn = as.data.frame(scale(knndat[c(2, 7, 8)], center = TRUE, scale = TRUE)) # only scaling the numerical values
scaledknn[c('Type', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'AdoptionSpeed')] = knndat[c(1, 3, 4, 5, 6, 9)]
#sampling for train and test
set.seed(1000)
knn_sample <- sample(2, nrow(scaledknn), replace=TRUE, prob=c(0.7, 0.3))
train <- scaledknn[knn_sample==1, 1:3, 5:9]
test <- scaledknn[knn_sample==2, 1:3, 5:9]
typeknn.trainLabel = scaledknn[knn_sample==1, 4]
typeknn.testLabel = scaledknn[knn_sample==2, 4]
ResultDf = data.frame( k=numeric(0), Total.Accuracy= numeric(0), row.names = NULL )
for (kval in 3:20) {
tpred <- knn(train = train, test = test, cl=typeknn.trainLabel, k=kval)
cross <- CrossTable(typeknn.testLabel, tpred, prop.chisq = FALSE)
cm = confusionMatrix(tpred, reference = as.factor(typeknn.testLabel)) # from caret library
cmaccu = cm$overall['Accuracy']
cmt = data.frame(k=kval, Total.Accuracy = cmaccu, row.names = NULL ) # initialize a row of the metrics
ResultDf = rbind(ResultDf, cmt)
}
datage <- dat[ ,c('Type','Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt', 'VideoAmt', 'AdoptionSpeed') ]
datage$puppy = NaN
datage$puppy[dat$Age <= 3] = 1
datage$puppy[dat$Age > 3] = 0
datage$puppy = as.factor(datage$puppy)
puppies = subset(datage, datage$puppy == 1)
older = subset(datage, datage$puppy ==0)
puppy_proportion = nrow(puppies) * 100/nrow(dat)
loadPkg("bestglm")
loadPkg("leaps")
datage$y <- datage$puppy
datage <- datage[, c('Type', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt', 'VideoAmt', 'AdoptionSpeed', 'y')]
datage <- na.omit(datage)
# using bestglm as it has feature selection built in
logit_pups <- bestglm(Xy = datage, family = binomial, IC = "AIC", method = "exhaustive")
summary(logit_pups)
unloadPkg("bestglm")
logit_pups$BestModels
summary(logit_pups$BestModels)
loadPkg("bestglm")
loadPkg("leaps")
datage$y <- datage$puppy
datage <- datage[, c('Type', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt', 'VideoAmt', 'AdoptionSpeed', 'y')]
View(datage)
datage <- dat[ ,c('Type','Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt', 'VideoAmt', 'AdoptionSpeed') ]
datage$puppy = NaN
datage$puppy[dat$Age <= 3] = 1
datage$puppy[dat$Age > 3] = 0
datage$puppy = as.factor(datage$puppy)
puppies = subset(datage, datage$puppy == 1)
older = subset(datage, datage$puppy ==0)
puppy_proportion = nrow(puppies) * 100/nrow(dat)
View(datage)
loadPkg("bestglm")
loadPkg("leaps")
datage$y <- datage$puppy
datage <- datage[, c('Type', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt', 'VideoAmt', 'AdoptionSpeed', 'y')]
datage <- na.omit(datage)
# using bestglm as it has feature selection built in
logit_pups <- bestglm(Xy = datage, family = binomial, IC = "AIC", method = "exhaustive")
summary(logit_pups)
unloadPkg("bestglm")
logit_pups$BestModels
summary(logit_pups$BestModels)
pup_logit <- glm(y ~ Type + Gender + MaturitySize + FurLength + Vaccinated + VideoAmt + AdoptionSpeed, data = datage, family = "binomial")
xkabledply(pup_logit, title = paste("Logistic Regression : Puppy ~ type +gender+size+fur+vaccinated+AdoptSpd+videos"))
loadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
ageHoslem = hoslem.test(datage$y, fitted(pup_logit)) # Hosmer and Lemeshow test, a chi-squared test
ageHoslem
unloadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
loadPkg("pROC")
prob=predict(pup_logit, type = "response" )
datage$prob=prob
h <- roc(y~prob, data=datage)
plot(h)
auc(h)
loadPkg("rpart")
datage <- datage[, c('Type', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt', 'VideoAmt', 'AdoptionSpeed', 'y')]
puppy_tree <- rpart(y ~ .,data = datage, method="class", control = list(maxdepth = 4))
printcp(puppy_tree) # display the results
plotcp(puppy_tree) # visualize cross-validation results
summary(puppy_tree) # detailed summary of splits
plot(puppy_tree, uniform=TRUE, main="Classification Tree for Puppy")
text(puppy_tree, use.n=TRUE, all=TRUE, cex=.8)
View(datage)
printcp(puppy_tree) # display the results
loadPkg("rpart")
datage <- datage[, c('Type', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt', 'VideoAmt', 'AdoptionSpeed', 'y')]
puppy_tree <- rpart(y ~ Type + Gender + MaturitySize + FurLength + Vaccinated + PhotoAmt + VideoAmt + AdoptionSpeed ,data = datage, method="class", control = list(maxdepth = 4))
printcp(puppy_tree) # display the results
set.seed(1)
kyphosisfit <- rpart(Kyphosis ~ Age + Number + Start, data=kyphosis, method="class", control = list(maxdepth = 4) )
# kyphosisfit <- rpart(Kyphosis ~ Age + Number + Start, data=kyphosis, method="class", control = {rpart.control list} )
# rpart.control(maxdepth = 30, minsplit = 20, minbucket = round(minsplit/3), cp = 0.01, maxcompete = 4, maxsurrogate = 5, usesurrogate = 2, xval = 10, surrogatestyle = 0, ...)
printcp(kyphosisfit) # display the results
plotcp(kyphosisfit) # visualize cross-validation results
summary(kyphosisfit) # detailed summary of splits
# plot tree
plot(kyphosisfit, uniform=TRUE, main="Classification Tree for Kyphosis")
text(kyphosisfit, use.n=TRUE, all=TRUE, cex=.8)
loadPkg("rpart")
datage <- datage[, c('Type', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt', 'VideoAmt', 'AdoptionSpeed', 'y')]
puppy_tree <- rpart(y ~ Type + Gender + MaturitySize + FurLength + Vaccinated + PhotoAmt + VideoAmt + AdoptionSpeed ,data = datage, method="class", control = list(maxdepth = 20))
printcp(puppy_tree) # display the results
plotcp(puppy_tree) # visualize cross-validation results
plotcp(puppy_tree) # visualize cross-validation results
summary(puppy_tree) # detailed summary of splits
plot(puppy_tree, uniform=TRUE, main="Classification Tree for Puppy")
text(puppy_tree, use.n=TRUE, all=TRUE, cex=.8)
loadPkg("rpart")
datage <- datage[, c('Type', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt', 'VideoAmt', 'AdoptionSpeed', 'y')]
puppy_tree_all <- rpart(y ~ Type + Gender + MaturitySize + FurLength + Vaccinated + PhotoAmt + VideoAmt + AdoptionSpeed ,data = datage, method="class", control = list(maxdepth = 20))
puppy_tree_vac_adopt <- rpart(y ~ Vaccinated+ AdoptionSpeed ,data = datage, method="class", control = list(maxdepth = 20))
printcp(puppy_tree) # display the results
printcp(puppy_tree_vac_adopt)
#printcp(puppy_tree) # display the results
printcp(puppy_tree_vac_adopt)
#summary(puppy_tree) # detailed summary of splits
summary(puppy_tree_vac_adopt)
summary(puppy_tree) # detailed summary of splits
#summary(puppy_tree_vac_adopt)
plot(puppy_tree_vac_adopt, uniform=TRUE, main="Classification Tree for Puppy")
text(puppy_tree_vac_adopt, use.n=TRUE, all=TRUE, cex=.8)
loadPkg("caret")
cm = confusionMatrix( predict(puppy_tree, type = "class"), reference = puppy_tree[, "Puppy Classification Tree"] )
loadPkg("caret")
cm = confusionMatrix( predict(puppy_tree, type = "class"), reference = puppy_tree[, "datage"] )
loadPkg("caret")
cm = confusionMatrix( predict(puppy_tree, type = "class"), reference = puppy_tree["datage"] )
loadPkg("caret")
cm = confusionMatrix( predict(puppy_tree, type = "class"), reference = puppy_tree["y"] )
loadPkg("caret")
cm = confusionMatrix( predict(puppy_tree, type = "class"), reference = puppy_tree )
loadPkg("caret")
cm = confusionMatrix( predict(puppy_tree, type = "class"), reference = datage$y )
print('Overall: ')
cm$overall
print('Class: ')
cm$byClass
unloadPkg("caret")
loadPkg("caret")
cm_puppy_logi = confusionMatrix( predict(pup_logit, type = "class"), reference = datage$y )
pup_logit <- glm(y ~ Type + Gender + MaturitySize + FurLength + Vaccinated + VideoAmt + AdoptionSpeed, data = datage, family = "binomial")
xkabledply(pup_logit, title = paste("Logistic Regression : Puppy ~ type +gender+size+fur+vaccinated+AdoptSpd+videos"))
loadPkg("caret")
cm_puppy_logi = confusionMatrix( predict(pup_logit, type = "class"), reference = datage$y )
xkabledply( confusion_matrix(pup_logit), title = "Confusion matrix from Logit Model" )
loadPkg("regclass")
xkabledply( confusion_matrix(pup_logit), title = "Confusion matrix from Logit Model" )
loadPkg("caret")
cm_puppy_logi = confusionMatrix(pup_logit, type = "class", reference = datage$y )
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F, echo = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
library("corrplot")
library("ezids")
library("gtsummary")
library('ggridges')
library('viridis')
library('wesanderson')
library('gridExtra')
library('leaps')
library('vtable')
library('pscl')
## Loading data
data = read.csv('datafile.csv')
initialrows = nrow(data)
data$AdoptionSpeed <- factor(data$AdoptionSpeed, order=T, levels = c(0,1,2,3,4))
# converting the data types we want - categorical
data$Type = as.factor(data$Type)
data$MaturitySize = as.factor(data$MaturitySize)
data$FurLength = as.factor(data$FurLength)
data$Vaccinated = as.factor(data$Vaccinated)
data$Gender = as.factor(data$Gender)
# Only looking at profiles with 1 animal
data = subset(data, data$Quantity == 1)
data = subset(data, ! data$AdoptionSpeed == 4)
# Only pulling the columns we want to look at
dat = data[c('Type', 'Age', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt','VideoAmt', 'AdoptionSpeed')]
summary(dat)
# Adding random values
#dat$ASnum = NaN
#dat$ASnum[dat$AdoptionSpeed == 0] = 0
#dat$ASnum[dat$AdoptionSpeed == 1] = floor(runif(sum(dat$AdoptionSpeed == 1), 1, 8))
#dat$ASnum[dat$AdoptionSpeed == 2] = floor(runif(sum(dat$AdoptionSpeed == 2), 8, 31))
#dat$ASnum[dat$AdoptionSpeed == 3] = floor(runif(sum(dat$AdoptionSpeed == 3), 31, 91))
#dat$ASnum[dat$AdoptionSpeed == 4] = 100 -- this line isn't necessary because we exclude animals that have this adoption speed
summary(dat)
# creating a cleaned dataset without the animal type
datclean = dat[, c('Age', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'PhotoAmt', 'VideoAmt', 'AdoptionSpeed')]
# labeling the target variable appropriately
datclean$y = dat[, c('Type')]
str(datclean)
loadPkg("bestglm")
# feature selection
res.bestglm <- bestglm(Xy = datclean, family = binomial,
IC = "AIC",
method = "exhaustive")
#summary(res.bestglm) # printing the summary
res.bestglm$BestModels
#summary(res.bestglm$BestModels)
unloadPkg("bestglm")
