dat$puppy = as.factor(dat$puppy)
puppies = subset(dat, dat$puppy == 1)
dat$puppy = NaN
dat$puppy[dat$Age <= 3] = 1
dat$puppy[dat$Age > 3] = 0
dat$puppy = as.factor(dat$puppy)
puppies = subset(dat, dat$puppy == 1)
dat$puppy = NaN
dat$puppy[dat$Age <= 3] = 1
dat$puppy[dat$Age > 3] = 0
dat$puppy = as.factor(dat$puppy)
puppies = subset(dat, dat$puppy == 1)
older = subset(dat, dat$puppy ==0)
dat$puppy = NaN
dat$puppy[dat$Age <= 3] = 1
dat$puppy[dat$Age > 3] = 0
dat$puppy = as.factor(dat$puppy)
puppies = subset(dat, dat$puppy == 1)
older = subset(dat, dat$puppy ==0)
puppy_proportion = nrow(puppies)/nrow(dat)
dat$puppy = NaN
dat$puppy[dat$Age <= 3] = 1
dat$puppy[dat$Age > 3] = 0
dat$puppy = as.factor(dat$puppy)
puppies = subset(dat, dat$puppy == 1)
older = subset(dat, dat$puppy ==0)
puppy_proportion = nrow(puppies) * 100/nrow(dat)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
nndf <- data.frame("USDANationalNutrient.csv")
str(nndf)
nndf <- data.frame(read.csv("USDANationalNutrient.csv"))
str(nndf)
nndf <- data.frame(read.csv("USDANationalNutrient.csv"))
str(nndf)
head(nndf)
tail(nndf)
nndf1 <- subset(nndf, select = -c(ID,FoodGroup,ShortDescrip,Descrip,CommonName,MfgName,ScientificName))
OLS_model <- lm(Energy_kcal~., data = nndf1)
OLS_model <- lm(Energy_kcal~., data = nndf1)
summary(OLS_model)
OLS_kcal <- lm(Energy_kcal~., data = nndf1)
summary(OLS_model)
OLS_b12 <- lm(VitB12_mcg~., data = nndf1)
summary(OLS_b12)
nndf <- nndf1[,1:23]
View(nndf)
# The package "ezids" (EZ Intro to Data Science) includes a lot of the helper functions we developed for the course.
# Some of the frequently used functions are loadPkg(), xkabledply(), xkablesummary(), uzscale(), etc.
library(ezids)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
# This example is from the Intro to Statistical Learning Lab which uses USArrets data.
#Below creates a character vector from the first column in the data.frame
# states <- row.names(USArrests)
#We now want to glance at our data, to try to understand the differences between the variables
USArrestsCentroid <- apply(USArrests , 2, mean)
xkabledply( as.table(USArrestsCentroid), wide = TRUE, title = "Centroid for USArrests" )
#We can see that that the average between the variables is quite high
USArrestsSds <- apply(USArrests , 2, var)
xkabledply( as.table(USArrestsSds), wide = TRUE, title = "Std devs for USArrests" )
xkablesummary(USArrests, title = "Five number summaries for USArrests")
#Find the correlation matrix
xkabledply( cor(USArrests), title = "correlation matrix for USArrests" )
#And the covariance matrix
xkabledply( cov(USArrests), title = "covariance matrix for USArrests" )
View(OLS_model)
nndf <- nndf1[,1:23]
nndfscaled <- apply(nndf1, 2, var, center=TRUE)
nndf <- nndf1[,1:23]
nndfscaled <- apply(nndf1, 2, var)
nndf <- nndf1[,1:23]
nndf <- data.frame(scale(nndf))
str(nndf)
head(nndf)
nndf <- nndf1[,1:23]
nndf <- data.frame(scale(nndf))
xtableply(cor(nndf), title= "Correlation Matrix for NNDF")
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
nndf <- nndf1[,1:23]
nndf <- data.frame(scale(nndf))
xkabledply(cor(nndf), title= "Correlation Matrix for NNDF")
View(nndf)
pr_vitb12 = prcomp(nndf, scale = TRUE)
scaled_pc_vitb12 <- lm(VitB12_mcg~., data= nndf)
summary(scaled_pc_vitb12)
View(pr_vitb12)
OLS_kcal <- lm(Energy_kcal~., data = nndf1)
summary(OLS_model)
OLS_b12 <- lm(VitB12_mcg~., data = nndf1)
summary(OLS_b12)
pr_vitb12 = prcomp(nndf, scale = TRUE)
scaled_pc_vitb12 <- lm(VitB12_mcg~., data= nndf)
summary(scaled_pc_vitb12)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
nndf <- data.frame(read.csv("USDANationalNutrient.csv"))
str(nndf)
head(nndf)
tail(nndf)
nndf1 <- subset(nndf, select = -c(ID,FoodGroup,ShortDescrip,Descrip,CommonName,MfgName,ScientificName))
OLS_kcal <- lm(Energy_kcal~., data = nndf1)
summary(OLS_model)
OLS_kcal <- lm(Energy_kcal~., data = nndf1)
summary(OLS_kcal)
OLS_b12 <- lm(VitB12_mcg~., data = nndf1)
summary(OLS_b12)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
nndf <- data.frame(read.csv("USDANationalNutrient.csv"))
str(nndf)
head(nndf)
tail(nndf)
nndf1 <- subset(nndf, select = -c(ID,FoodGroup,ShortDescrip,Descrip,CommonName,MfgName,ScientificName))
OLS_kcal <- lm(Energy_kcal~., data = nndf1)
summary(OLS_kcal)
OLS_b12 <- lm(VitB12_mcg~., data = nndf1)
summary(OLS_b12)
OLS_kcal <- lm(Energy_kcal~., data = nndf1)
summary(OLS_kcal)
OLS_b12 <- lm(VitB12_USRDA~., data = nndf1)
summary(OLS_b12)
View(nndf)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
nndf <- data.frame(read.csv("USDANationalNutrient.csv"))
str(nndf)
head(nndf)
tail(nndf)
nndf1 <- subset(nndf, select = -c(ID,FoodGroup,ShortDescrip,Descrip,CommonName,MfgName,ScientificName))
OLS_kcal <- lm(Energy_kcal~., data = nndf1)
summary(OLS_kcal)
OLS_b12 <- lm(VitB12_USRDA~., data = nndf1)
summary(OLS_b12)
nndf <- nndf1[,1:23]
nndf <- data.frame(scale(nndf))
xkabledply(cor(nndf), title= "Correlation Matrix for NNDF")
View(nndf1)
OLS_kcal <- lm(Energy_kcal~., data = nndf1)
summary(OLS_kcal)
OLS_b12 <- lm(VitB12_mcg~., data = nndf1)
summary(OLS_b12)
nndf <- nndf1[,1:23]
nndf <- data.frame(scale(nndf))
xkabledply(cor(nndf), title= "Correlation Matrix for NNDF")
pr_vitb12 = prcomp(nndf, scale = TRUE)
scaled_pc_vitb12 <- lm(VitB12_mcg~., data= nndf)
summary(scaled_pc_vitb12)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
nndf <- data.frame(read.csv("USDANationalNutrient.csv"))
str(nndf)
head(nndf)
tail(nndf)
nndf1 <- subset(nndf, select = -c(ID,FoodGroup,ShortDescrip,Descrip,CommonName,MfgName,ScientificName))
OLS_kcal <- lm(Energy_kcal~., data = nndf1)
summary(OLS_kcal)
OLS_b12 <- lm(VitB12_mcg~., data = nndf1)
summary(OLS_b12)
nndf <- nndf1[,1:23]
nndf <- data.frame(scale(nndf))
xkabledply(cor(nndf), title= "Correlation Matrix for NNDF")
scaled_pc_vitb12 <- lm(VitB12_mcg~., data= nndf)
summary(scaled_pc_vitb12)
nnpcomp = prcomp(nndf, scale = TRUE)
View(nnpcomp)
nnpcomp = prcomp(nndf, scale = TRUE)
summary(nnpcomp)
# The package "ezids" (EZ Intro to Data Science) includes a lot of the helper functions we developed for the course.
# Some of the frequently used functions are loadPkg(), xkabledply(), xkablesummary(), uzscale(), etc.
library(ezids)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
# This example is from the Intro to Statistical Learning Lab which uses USArrets data.
#Below creates a character vector from the first column in the data.frame
# states <- row.names(USArrests)
#We now want to glance at our data, to try to understand the differences between the variables
USArrestsCentroid <- apply(USArrests , 2, mean)
xkabledply( as.table(USArrestsCentroid), wide = TRUE, title = "Centroid for USArrests" )
#We can see that that the average between the variables is quite high
USArrestsSds <- apply(USArrests , 2, var)
xkabledply( as.table(USArrestsSds), wide = TRUE, title = "Std devs for USArrests" )
xkablesummary(USArrests, title = "Five number summaries for USArrests")
#Find the correlation matrix
xkabledply( cor(USArrests), title = "correlation matrix for USArrests" )
#And the covariance matrix
xkabledply( cov(USArrests), title = "covariance matrix for USArrests" )
#compare to the matrices after standardization
USArrestscale = data.frame(scale(USArrests))
xkabledply( cor(USArrestscale), title = "correlation matrix for USArrestscale" )
xkabledply( cov(USArrestscale), title = "covariance matrix for USArrestscale"  )
pr.out =prcomp(USArrests , scale =TRUE) # center=TRUE is the default
pr.out.ns =prcomp(USArrests , scale =FALSE) # this is centered, un-normalized data, just for comparison.
pr.out.nsnc =prcomp(USArrests , scale =FALSE, center = FALSE) # this is neither centered nor scaled.
#Here are the "loading" vector for the PCA components
print("Case: z-score/scaled")
summary(pr.out)
pr.out$rotation
print("Case: not scaled")
summary(pr.out.ns)
pr.out.ns$rotation
print("Case: not scaled nor centered")
summary(pr.out.nsnc)
pr.out.nsnc$rotation
nnpcomp = prcomp(nndf, scale = TRUE)
summary(nnpcomp)
nppcomp$rotation
nnpcomp <- prcomp(nndf, scale = TRUE)
summary(nnpcomp)
nppcomp$rotation
View(nnpcomp)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
nndf <- data.frame(read.csv("USDANationalNutrient.csv"))
str(nndf)
head(nndf)
tail(nndf)
nndf1 <- subset(nndf, select = -c(ID,FoodGroup,ShortDescrip,Descrip,CommonName,MfgName,ScientificName))
OLS_kcal <- lm(Energy_kcal~., data = nndf1)
summary(OLS_kcal)
OLS_b12 <- lm(VitB12_mcg~., data = nndf1)
summary(OLS_b12)
nndf <- nndf1[,1:23]
nndf <- data.frame(scale(nndf))
xkabledply(cor(nndf), title= "Correlation Matrix for NNDF")
scaled_pc_vitb12 <- lm(VitB12_mcg~., data= nndf)
summary(scaled_pc_vitb12)
nnpcomp <- prcomp(nndf, scale = TRUE)
summary(nnpcomp)
nppcomp$rotation
nnpcomp <- prcomp(nndf, scale = TRUE)
summary(nnpcomp)
nppcomp.out$rotation
pr.out =prcomp(USArrests , scale =TRUE) # center=TRUE is the default
pr.out.ns =prcomp(USArrests , scale =FALSE) # this is centered, un-normalized data, just for comparison.
pr.out.nsnc =prcomp(USArrests , scale =FALSE, center = FALSE) # this is neither centered nor scaled.
#Here are the "loading" vector for the PCA components
print("Case: z-score/scaled")
summary(pr.out)
pr.out$rotation
print("Case: not scaled")
summary(pr.out.ns)
pr.out.ns$rotation
print("Case: not scaled nor centered")
summary(pr.out.nsnc)
pr.out.nsnc$rotation
nnpcomp <- prcomp(nndf, scale = TRUE)
summary(nnpcomp)
nppcomp$rotation
View(pr.out)
nndf <- nndf1[,1:23]
nndf <- data.frame(scale(nndf))
xkabledply(cor(nndf), title= "Correlation Matrix for NNDF")
View(nnpcomp)
scaled_pc_vitb12 <- lm(VitB12_mcg~., data= nndf)
summary(scaled_pc_vitb12)
nnpcomp <- prcomp(nndf)
summary(nnpcomp)
nppcomp$rotation
nnp_comp <- prcomp(nndf)
summary(nnpcomp)
npp_comp
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
nndf <- data.frame(read.csv("USDANationalNutrient.csv"))
str(nndf)
head(nndf)
tail(nndf)
nndf1 <- subset(nndf, select = -c(ID,FoodGroup,ShortDescrip,Descrip,CommonName,MfgName,ScientificName))
OLS_kcal <- lm(Energy_kcal~., data = nndf1)
summary(OLS_kcal)
OLS_b12 <- lm(VitB12_mcg~., data = nndf1)
summary(OLS_b12)
nndf <- nndf1[,1:23]
nndf <- data.frame(scale(nndf))
xkabledply(cor(nndf), title= "Correlation Matrix for NNDF")
scaled_pc_vitb12 <- lm(VitB12_mcg~., data= nndf)
summary(scaled_pc_vitb12)
nnp_comp <- prcomp(nndf)
summary(nnpcomp)
nnp_comp <- prcomp(nndf)
summary(nnp_comp)
npp_comp
nnp_comp <- prcomp(nndf)
summary(nnp_comp)
npp_comp$rotation
nnpcomp <- prcomp(nndf)
nppcomp$rotation
nnpcomp <- prcomp(nndf)
nppcomp$rotation
nnpcomp <- prcomp(nndf)
nppcomp$rotation
nnpcomp <- prcomp(nndf)
nppcomp$rotation
nnpcomp <- prcomp(nndf)
nppcomp$rotation
nnpcomp <- prcomp(nndf)
nppcomp$rotation
nnpcomp <- prcomp(nndf)
nppcomp$rotation
nnpcomp <- prcomp(nndf)
nppcomp$rotation
nnpcomp <- prcomp(nndf)
nppcomp$rotation
nnpcomp <- prcomp(nndf)
nppcomp$rotation
nnpcomp <- prcomp(nndf)
nppcomp$rotation
nnpcomp <- prcomp(nndf)
nppcomp$rotation
nnpcomp <- prcomp(nndf)
nppcomp$rotation
nnpcomp <- prcomp(nndf)
nppcomp$rotation
nnpcomp <- prcomp(nndf)
nppcomp$rotation
nnpcomp <- prcomp(nndf)
nppcomp
nnpcomp <- prcomp(nndf)
nppcomp
nnpcomp <- prcomp(nndf)
nnpcomp$rotation
# The package "ezids" (EZ Intro to Data Science) includes a lot of the helper functions we developed for the course.
# Some of the frequently used functions are loadPkg(), xkabledply(), xkablesummary(), uzscale(), etc.
library(ezids)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
# This example is from the Intro to Statistical Learning Lab which uses USArrets data.
#Below creates a character vector from the first column in the data.frame
# states <- row.names(USArrests)
#We now want to glance at our data, to try to understand the differences between the variables
USArrestsCentroid <- apply(USArrests , 2, mean)
xkabledply( as.table(USArrestsCentroid), wide = TRUE, title = "Centroid for USArrests" )
#We can see that that the average between the variables is quite high
USArrestsSds <- apply(USArrests , 2, var)
xkabledply( as.table(USArrestsSds), wide = TRUE, title = "Std devs for USArrests" )
xkablesummary(USArrests, title = "Five number summaries for USArrests")
#Find the correlation matrix
xkabledply( cor(USArrests), title = "correlation matrix for USArrests" )
#And the covariance matrix
xkabledply( cov(USArrests), title = "covariance matrix for USArrests" )
#compare to the matrices after standardization
USArrestscale = data.frame(scale(USArrests))
xkabledply( cor(USArrestscale), title = "correlation matrix for USArrestscale" )
xkabledply( cov(USArrestscale), title = "covariance matrix for USArrestscale"  )
pr.out =prcomp(USArrests , scale =TRUE) # center=TRUE is the default
pr.out.ns =prcomp(USArrests , scale =FALSE) # this is centered, un-normalized data, just for comparison.
pr.out.nsnc =prcomp(USArrests , scale =FALSE, center = FALSE) # this is neither centered nor scaled.
#Here are the "loading" vector for the PCA components
print("Case: z-score/scaled")
summary(pr.out)
pr.out$rotation
print("Case: not scaled")
summary(pr.out.ns)
pr.out.ns$rotation
print("Case: not scaled nor centered")
summary(pr.out.nsnc)
pr.out.nsnc$rotation
nnpcomp <- prcomp(nndf)
summary(nnpcomp)
nnpcomp$rotation
biplot (nnpcomp, c(1,2), scale=0)
biplot (nnpcomp, c(1,2), scale=0)
biplot( nnpcomp, c(2,3), scale=0)
biplot( nnpcomp, c(3,4), scale=0)
biplot (nnpcomp, c(4,5), scale=0)
biplot( nnpcomp, c(5,6), scale=0)
# The package "ezids" (EZ Intro to Data Science) includes a lot of the helper functions we developed for the course.
# Some of the frequently used functions are loadPkg(), xkabledply(), xkablesummary(), uzscale(), etc.
library(ezids)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
# This example is from the Intro to Statistical Learning Lab which uses USArrets data.
#Below creates a character vector from the first column in the data.frame
# states <- row.names(USArrests)
#We now want to glance at our data, to try to understand the differences between the variables
USArrestsCentroid <- apply(USArrests , 2, mean)
xkabledply( as.table(USArrestsCentroid), wide = TRUE, title = "Centroid for USArrests" )
#We can see that that the average between the variables is quite high
USArrestsSds <- apply(USArrests , 2, var)
xkabledply( as.table(USArrestsSds), wide = TRUE, title = "Std devs for USArrests" )
xkablesummary(USArrests, title = "Five number summaries for USArrests")
#Find the correlation matrix
xkabledply( cor(USArrests), title = "correlation matrix for USArrests" )
#And the covariance matrix
xkabledply( cov(USArrests), title = "covariance matrix for USArrests" )
#compare to the matrices after standardization
USArrestscale = data.frame(scale(USArrests))
xkabledply( cor(USArrestscale), title = "correlation matrix for USArrestscale" )
xkabledply( cov(USArrestscale), title = "covariance matrix for USArrestscale"  )
pr.out =prcomp(USArrests , scale =TRUE) # center=TRUE is the default
pr.out.ns =prcomp(USArrests , scale =FALSE) # this is centered, un-normalized data, just for comparison.
pr.out.nsnc =prcomp(USArrests , scale =FALSE, center = FALSE) # this is neither centered nor scaled.
#Here are the "loading" vector for the PCA components
print("Case: z-score/scaled")
summary(pr.out)
pr.out$rotation
print("Case: not scaled")
summary(pr.out.ns)
pr.out.ns$rotation
print("Case: not scaled nor centered")
summary(pr.out.nsnc)
pr.out.nsnc$rotation
print("USArrestsCentroid:")
USArrestsCentroid
print("Normalized USArrestsCentroid:")
USArrestsCentroid / sqrt(sum(USArrestsCentroid^2))
#####
# biplot(pr.out.ns, scale = 1)
biplot(pr.out, scale = 0) # scale = 1 is the default, which will scale the loadings by 10^1, and the PC component values by 10^-1.
USArrests.pc = PCAxform(USArrests,FALSE)
print("Case: not scaled")
summary(USArrests.pc)
cov(USArrests.pc)
cor(USArrests.pc)
USArrests.z.pc = PCAxform(USArrests,TRUE)
print("Case: z-score/scaled")
xkablesummary(USArrests.z.pc)
cov(USArrests.z.pc)
cor(USArrests.z.pc)
#Let us plot the cumulation of variance using the sd
pr.var <- (pr.out$sdev^2)
pve <- pr.var/sum(pr.var)
plot(cumsum(pve), xlab="Principal Component (standardized)", ylab ="Cumulative Proportion of Variance Explained",ylim=c(0,1),type="b")
pr.var.nc <- (pr.out.ns$sdev^2)
pve.nc <- pr.var.nc/sum(pr.var.nc)
plot(cumsum(pve.nc), xlab="Principal Component (non-standardized)", ylab ="Cumulative Proportion of Variance Explained",ylim=c(0,1),type="b")
biplot(pr.out,2:3, scale =0)
biplot(pr.out.ns,2:3, scale =0)
biplot(pr.out,3:4, scale =0)
biplot(pr.out.ns,3:4, scale =0)
